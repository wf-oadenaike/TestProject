
CREATE FUNCTION [Access.WebDev].[ufn_GetFundHoldingsMarketValue]
(
	@PositionDate date = NULL
)
RETURNS @returntable TABLE
(
	   [POSITION_DATE] DATE
      ,[FUND_SHORT_NAME] VARCHAR(15)
	  ,[EDM_SEC_ID] BIGINT
	  ,[UNIQUE_BLOOMBERG_ID] VARCHAR(20)
	  ,[POSITION_TYPE] VARCHAR(10)
	  ,[SECURITY_NAME] VARCHAR(127)
	  ,[PARSEKEYABLE_DESCRIPTION] VARCHAR(127)
	  ,[SECURITY_ISO_CCY] CHAR(3)
      ,[LONG_SHORT_IND] VARCHAR(10)
      ,[QUANTITY] DECIMAL(20,6)
	  ,[IsUnquoted] BIT
	  ,EODPrice FLOAT
	  ,MidPrice FLOAT
	  ,PreviousEODPrice FLOAT
	  ,PreviousMidPrice FLOAT
	  ,Multiplier FLOAT
	  ,FX FLOAT
	  ,PreviousFx FLOAT
	  ,MARKET_VALUE_LOCAL DECIMAL(19,2)
	  ,MARKET_VALUE_BASE DECIMAL(19,2)
	  ,PRICE_DATE DATETIME
	  ,ISSUE_COUNTRY_ISO VARCHAR(4)
	  ,ASSET_TYPE VARCHAR(30)
)
AS
BEGIN
IF @PositionDate IS NULL
BEGIN
	SET @PositionDate = CONVERT(DATE, GETDATE())
END

DECLARE @positions TABLE (
	[SOURCE] [varchar](50) NOT NULL,
	[POSITION_TYPE] [varchar](50) NOT NULL,
	[EDM_SEC_ID] [int] NULL,
	[FUND_SHORT_NAME] [varchar](15) NOT NULL,
	[LONG_SHORT_IND] [varchar](8) NOT NULL,
	[POSITION_DATE] [datetime] NOT NULL,
	[DATA_DATE] [DATETIME] NOT NULL,
	[QUANTITY] [decimal](20, 6) NULL
)

DECLARE @UnquotedPrices TABLE (
	[EDM_SEC_ID] [int] NULL,
	[MASTER_PRICE] [decimal](24, 10) NULL,
	[PRICE_ISO_CCY] [varchar](3) NULL
)

;WITH CTE_UnquotedPrices AS (
	SELECT s.EDM_SEC_ID, MAX(PRICE_DATE) AS PRICE_DATE
	FROM
		[dbo].[T_MASTER_SEC] s
	INNER JOIN
		[dbo].[T_MASTER_PRC] p
	ON
		s.EDM_SEC_ID = p.EDM_SEC_ID
	WHERE
		(LEFT(s.[TICKER],1) = '.' OR LEFT(s.[TICKER],1) = '0')
		AND CONVERT(DATE,p.PRICE_DATE) <= @PositionDate 
		AND MASTER_PRICE IS NOT NULL
	GROUP BY s.EDM_SEC_ID
)
INSERT INTO @UnquotedPrices (EDM_SEC_ID, MASTER_PRICE, PRICE_ISO_CCY)
SELECT p.EDM_SEC_ID, MAX(p.MASTER_PRICE), p.PRICE_ISO_CCY
FROM [dbo].[T_MASTER_PRC] p
INNER JOIN CTE_UnquotedPrices cte ON cte.EDM_SEC_ID = p.EDM_SEC_ID AND cte.PRICE_DATE = p.PRICE_DATE
GROUP BY p.EDM_SEC_ID, p.PRICE_ISO_CCY

DECLARE @Prices TABLE (

[EDM_SEC_ID] [int] NULL,
	[PRICE_TYPE] [varchar](50) NOT NULL,
	[PRICE_SOURCE] [varchar](50) NULL,
	[PRICE_DATE] [datetime] NOT NULL,
	[PRICE_TIME] [varchar](8000) NULL,
	[AVERAGE_COST] [varchar](20) NULL,
	[PRICE_SOURCE_RANKING] [int] NULL,
	[PRICE_ISO_CCY] [varchar](3) NULL,
	[MASTER_PRICE] [decimal](24, 10) NULL,
	[ASK_PRICE] [decimal](24, 10) NULL,
	[MID_PRICE] [decimal](24, 10) NULL,
	[BID_PRICE] [decimal](24, 10) NULL,
	[IsCurrentPrice] BIT NOT NULL DEFAULT 0
	)

IF EXISTS (
	SELECT TOP 1 1 FROM [dbo].[T_MASTER_POS] m WHERE m.[Source] = 'NT' AND 
			m.[POSITION_TYPE] = 'Position' AND
			m.[POSITION_DATE] = @PositionDate
)
BEGIN
INSERT INTO @positions ([SOURCE], [POSITION_TYPE], [EDM_SEC_ID], [FUND_SHORT_NAME], [LONG_SHORT_IND], [POSITION_DATE], [DATA_DATE], [QUANTITY])
SELECT 
		m.[SOURCE]
		,m.[POSITION_TYPE]
		,m.[EDM_SEC_ID]
		,m.[FUND_SHORT_NAME]
		,m.[LONG_SHORT_IND]
		,m.[POSITION_DATE]
		,m.[CADIS_SYSTEM_UPDATED]
		,COALESCE(o.[QUANTITY], m.[QUANTITY]) AS [QUANTITY]
	FROM 
		[dbo].[T_MASTER_POS] m
	LEFT JOIN
		[dbo].[T_OVERRIDE_POS] o ON 
			m.[SOURCE] = o.[SOURCE] AND
			m.[POSITION_TYPE] = o.[POSITION_TYPE] AND
			m.[EDM_SEC_ID] = o.[EDM_SEC_ID] AND
			m.[FUND_SHORT_NAME] = o.[FUND_SHORT_NAME] AND
			m.[LONG_SHORT_IND] = o.[LONG_SHORT_IND] AND
			m.[POSITION_DATE] = o.[POSITION_DATE]
	WHERE
			m.[Source] = 'NT' AND 
			m.[POSITION_TYPE] = 'Position' AND
			m.[POSITION_DATE] = @PositionDate
END
ELSE
-- IF no positions for the current day then use the previous days' positions
	WITH CTE_Position_Data AS (
		SELECT 
				m.[SOURCE]
				,m.[POSITION_TYPE]
				,m.[EDM_SEC_ID]
				,LTRIM(RTRIM(m.[FUND_SHORT_NAME])) AS [FUND_SHORT_NAME]
				,m.[LONG_SHORT_IND]
				,m.[POSITION_DATE]
				,m.[CADIS_SYSTEM_UPDATED] AS [DATA_DATE]
				,COALESCE(o.[QUANTITY], m.[QUANTITY]) AS [QUANTITY]
			FROM 
				[dbo].[T_MASTER_POS] m
			LEFT JOIN
				[dbo].[T_OVERRIDE_POS] o ON 
					m.[SOURCE] = o.[SOURCE] AND
					m.[POSITION_TYPE] = o.[POSITION_TYPE] AND
					m.[EDM_SEC_ID] = o.[EDM_SEC_ID] AND
					m.[FUND_SHORT_NAME] = o.[FUND_SHORT_NAME] AND
					m.[LONG_SHORT_IND] = o.[LONG_SHORT_IND] AND
					m.[POSITION_DATE] = o.[POSITION_DATE]
			WHERE
					m.[Source] = 'NT' AND 
					m.[POSITION_TYPE] = 'Position' AND
					m.[POSITION_DATE] = (CASE WHEN DATENAME(DW, @PositionDate) = 'MONDAY' THEN DATEADD(dd, -3,  @PositionDate) ELSE DATEADD(dd, -1,  @PositionDate) END)
			UNION ALL
	
			SELECT
				'BBG'
				,'Trades'
				,sec.EDM_SEC_ID
				,LTRIM(RTRIM([TraderAccountName]))
				,(CASE WHEN [BuySellCoverShortFlag] = 'B' THEN 'LONG' WHEN [BuySellCoverShortFlag] = 'S' THEN 'SHORT' END)
				,CONVERT(DATETIME, CONVERT(VARCHAR(10),CONVERT(DATE, [TradeDate])) + ' 12:00:00') AS [POSITION_DATE]
				,(CASE WHEN DATENAME(DW, @PositionDate) = 'MONDAY' THEN DATEADD(dd, -3,  @PositionDate) ELSE DATEADD(dd, -1,  @PositionDate) END) AS [DATA_DATE]
				,CONVERT(DECIMAL(18,6),[TradeAmount]) * (CASE WHEN [BuySellCoverShortFlag] = 'B' THEN 1.0 WHEN [BuySellCoverShortFlag] = 'S' THEN -1.0 END)
			FROM
				[dbo].[T_MASTER_BBAIM_TRADE] t
			LEFT JOIN
				[dbo].[T_MASTER_SEC] sec ON sec.UNIQUE_BLOOMBERG_ID = t.UNIQUEBLOOMBERGID
			WHERE
				CONVERT(DATE,t.[TradeDate]) = @PositionDate AND CancelDueToCorrection <> 'Y'
	)
	INSERT INTO @positions ([SOURCE], [POSITION_TYPE], [EDM_SEC_ID], [FUND_SHORT_NAME], [LONG_SHORT_IND], [POSITION_DATE], [DATA_DATE], [QUANTITY])
	SELECT
		[SOURCE]
		,[POSITION_TYPE]
		,[EDM_SEC_ID]
		,LTRIM(RTRIM([FUND_SHORT_NAME]))
		,[LONG_SHORT_IND]
		,(SELECT MAX([POSITION_DATE]) FROM CTE_Position_Data) AS [POSITION_DATE]
		,(SELECT MIN([DATA_DATE]) FROM CTE_Position_Data) AS [DATA_DATE]
		,[QUANTITY]
	FROM  CTE_Position_Data

-- IF we have the EOD price for the current position date then use that, else use the live price, else use the Midday Mid, otherwise use yesterdays' EOD prices
	IF EXISTS (
		SELECT TOP 1 1 FROM [dbo].[T_MASTER_PRC] m WHERE m.PRICE_DATE = @PositionDate AND m.PRICE_TYPE = 'EOD'
	)
	BEGIN
		INSERT INTO @Prices ([EDM_SEC_ID], [PRICE_TYPE], [PRICE_SOURCE], [PRICE_DATE], [PRICE_TIME], [AVERAGE_COST], [PRICE_SOURCE_RANKING], [PRICE_ISO_CCY]
		, [MASTER_PRICE], [ASK_PRICE], [MID_PRICE], [BID_PRICE], IsCurrentPrice
		)
		SELECT 
			   m.[EDM_SEC_ID]
			  ,m.[PRICE_TYPE]
			  ,COALESCE(o.[PRICE_SOURCE], m.[PRICE_SOURCE]) AS [PRICE_SOURCE]
			  ,m.[PRICE_DATE]
			  ,COALESCE(o.[PRICE_TIME], m.[PRICE_TIME], '00:00:00') AS [PRICE_TIME]
			  ,COALESCE(o.[AVERAGE_COST], m.[AVERAGE_COST]) AS [AVERAGE_COST]
			  ,COALESCE(o.[PRICE_SOURCE_RANKING], m.[PRICE_SOURCE_RANKING]) AS [PRICE_SOURCE_RANKING]
			  ,(CASE WHEN m.EDM_SEC_ID = 700000140 THEN 'GBp' ELSE COALESCE(o.[PRICE_ISO_CCY], m.[PRICE_ISO_CCY]) END) AS [PRICE_ISO_CCY]
			  ,COALESCE(o.[MASTER_PRICE], m.[MASTER_PRICE], m.[MID_PRICE]) AS [MASTER_PRICE]
			  ,COALESCE(o.[ASK_PRICE], m.[ASK_PRICE]) AS [ASK_PRICE]
			  ,COALESCE(o.[MID_PRICE], m.[MID_PRICE]) AS [MID_PRICE]
			  ,COALESCE(o.[BID_PRICE], m.[BID_PRICE]) AS [BID_PRICE]
			  , 1
		  FROM 
			[dbo].[T_MASTER_PRC] m
		 LEFT JOIN 
			[dbo].[T_OVERRIDE_PRC] o ON 
				m.[EDM_SEC_ID] = o.[EDM_SEC_ID] AND
				m.[PRICE_TYPE] = o.[PRICE_TYPE] AND
				m.[PRICE_DATE] = o.[PRICE_DATE]
		 WHERE m.[PRICE_DATE] = @PositionDate AND m.PRICE_TYPE = 'EOD'
	END
	-- Live price
	ELSE IF EXISTS (
		SELECT TOP 1 1 FROM [dbo].[T_MASTER_PRC] m WHERE m.PRICE_DATE = @PositionDate AND  m.PRICE_TYPE NOT IN ('EOD','Midday Mid')
	)
	BEGIN
		INSERT INTO @Prices ([EDM_SEC_ID], [PRICE_TYPE], [PRICE_SOURCE], [PRICE_DATE], [PRICE_TIME], [AVERAGE_COST], [PRICE_SOURCE_RANKING], [PRICE_ISO_CCY]
			, [MASTER_PRICE], [ASK_PRICE], [MID_PRICE], [BID_PRICE], IsCurrentPrice
		)
		SELECT 
					m.[EDM_SEC_ID]
				  ,m.[PRICE_TYPE]
				  ,COALESCE(o.[PRICE_SOURCE], m.[PRICE_SOURCE]) AS [PRICE_SOURCE]
				  ,m.[PRICE_DATE]
				  ,COALESCE(o.[PRICE_TIME], m.[PRICE_TIME]) AS [PRICE_TIME]
				  ,COALESCE(o.[AVERAGE_COST], m.[AVERAGE_COST]) AS [AVERAGE_COST]
				  ,COALESCE(o.[PRICE_SOURCE_RANKING], m.[PRICE_SOURCE_RANKING]) AS [PRICE_SOURCE_RANKING]
				  ,(CASE WHEN m.EDM_SEC_ID = 700000140 THEN 'GBp' ELSE COALESCE(o.[PRICE_ISO_CCY], m.[PRICE_ISO_CCY]) END) AS [PRICE_ISO_CCY]
				  ,COALESCE(o.[MASTER_PRICE], m.[MASTER_PRICE], m.[MID_PRICE]) AS [MASTER_PRICE]
				  ,COALESCE(o.[ASK_PRICE], m.[ASK_PRICE]) AS [ASK_PRICE]
				  ,COALESCE(o.[MID_PRICE], m.[MID_PRICE]) AS [MID_PRICE]
				  ,COALESCE(o.[BID_PRICE], m.[BID_PRICE]) AS [BID_PRICE]
				  , 1
			  FROM 
				[dbo].[T_MASTER_PRC] m
			 LEFT JOIN 
				[dbo].[T_OVERRIDE_PRC] o ON 
					m.[EDM_SEC_ID] = o.[EDM_SEC_ID] AND
					m.[PRICE_TYPE] = o.[PRICE_TYPE] AND
					m.[PRICE_DATE] = o.[PRICE_DATE]
			 WHERE m.[PRICE_DATE] = @PositionDate
			 AND m.PRICE_TYPE IN ('Live')
	END
	-- Midday Price
	ELSE IF EXISTS (
		SELECT TOP 1 1 FROM [dbo].[T_MASTER_PRC] m WHERE m.PRICE_DATE = @PositionDate AND m.PRICE_TYPE = 'Midday Mid'
	)
	BEGIN
		INSERT INTO @Prices ([EDM_SEC_ID], [PRICE_TYPE], [PRICE_SOURCE], [PRICE_DATE], [PRICE_TIME], [AVERAGE_COST], [PRICE_SOURCE_RANKING], [PRICE_ISO_CCY]
		, [MASTER_PRICE], [ASK_PRICE], [MID_PRICE], [BID_PRICE], IsCurrentPrice
		)
		SELECT 
				m.[EDM_SEC_ID]
			  ,m.[PRICE_TYPE]
			  ,COALESCE(o.[PRICE_SOURCE], m.[PRICE_SOURCE]) AS [PRICE_SOURCE]
			  ,m.[PRICE_DATE]
			  ,COALESCE(o.[PRICE_TIME], '12:00:00') AS [PRICE_TIME]
			  ,COALESCE(o.[AVERAGE_COST], m.[AVERAGE_COST]) AS [AVERAGE_COST]
			  ,COALESCE(o.[PRICE_SOURCE_RANKING], m.[PRICE_SOURCE_RANKING]) AS [PRICE_SOURCE_RANKING]
			  ,(CASE WHEN m.EDM_SEC_ID = 700000140 THEN 'GBp' ELSE COALESCE(o.[PRICE_ISO_CCY], m.[PRICE_ISO_CCY]) END) AS [PRICE_ISO_CCY]
			  ,COALESCE(o.[MASTER_PRICE], m.[MASTER_PRICE], m.[MID_PRICE]) AS [MASTER_PRICE]
			  ,COALESCE(o.[ASK_PRICE], m.[ASK_PRICE]) AS [ASK_PRICE]
			  ,COALESCE(o.[MID_PRICE], m.[MID_PRICE]) AS [MID_PRICE]
			  ,COALESCE(o.[BID_PRICE], m.[BID_PRICE]) AS [BID_PRICE]
			  ,1
		  FROM 
			[dbo].[T_MASTER_PRC] m
		 LEFT JOIN 
			[dbo].[T_OVERRIDE_PRC] o ON 
				m.[EDM_SEC_ID] = o.[EDM_SEC_ID] AND
				m.[PRICE_TYPE] = o.[PRICE_TYPE] AND
				m.[PRICE_DATE] = o.[PRICE_DATE]
		 WHERE m.[PRICE_DATE] = @PositionDate AND m.PRICE_TYPE = 'Midday Mid'
	END
	ELSE 
	BEGIN
		INSERT INTO @Prices ([EDM_SEC_ID], [PRICE_TYPE], [PRICE_SOURCE], [PRICE_DATE], [PRICE_TIME], [AVERAGE_COST], [PRICE_SOURCE_RANKING], [PRICE_ISO_CCY]
			, [MASTER_PRICE], [ASK_PRICE], [MID_PRICE], [BID_PRICE], IsCurrentPrice
		)
		SELECT 
					m.[EDM_SEC_ID]
				  ,m.[PRICE_TYPE]
				  ,COALESCE(o.[PRICE_SOURCE], m.[PRICE_SOURCE]) AS [PRICE_SOURCE]
				  ,m.[PRICE_DATE]
				  ,COALESCE(o.[PRICE_TIME], m.[PRICE_TIME]) AS [PRICE_TIME]
				  ,COALESCE(o.[AVERAGE_COST], m.[AVERAGE_COST]) AS [AVERAGE_COST]
				  ,COALESCE(o.[PRICE_SOURCE_RANKING], m.[PRICE_SOURCE_RANKING]) AS [PRICE_SOURCE_RANKING]
				  ,(CASE WHEN m.EDM_SEC_ID = 700000140 THEN 'GBp' ELSE COALESCE(o.[PRICE_ISO_CCY], m.[PRICE_ISO_CCY]) END) AS [PRICE_ISO_CCY]
				  ,COALESCE(o.[MASTER_PRICE], m.[MASTER_PRICE], m.[MID_PRICE]) AS [MASTER_PRICE]
				  ,COALESCE(o.[ASK_PRICE], m.[ASK_PRICE]) AS [ASK_PRICE]
				  ,COALESCE(o.[MID_PRICE], m.[MID_PRICE]) AS [MID_PRICE]
				  ,COALESCE(o.[BID_PRICE], m.[BID_PRICE]) AS [BID_PRICE]
				  , 0
			  FROM 
				[dbo].[T_MASTER_PRC] m
			 LEFT JOIN 
				[dbo].[T_OVERRIDE_PRC] o ON 
					m.[EDM_SEC_ID] = o.[EDM_SEC_ID] AND
					m.[PRICE_TYPE] = o.[PRICE_TYPE] AND
					m.[PRICE_DATE] = o.[PRICE_DATE]
			 WHERE m.[PRICE_DATE] = (CASE WHEN DATENAME(DW, @PositionDate) = 'MONDAY' THEN DATEADD(dd, -3,  @PositionDate) ELSE DATEADD(dd, -1,  @PositionDate) END)
			 AND m.PRICE_TYPE = 'EOD'
	END
 
;WITH CTE_Positions AS
(
	SELECT 
		m.[SOURCE]
		,m.[POSITION_TYPE]
		,m.[EDM_SEC_ID]
		,m.[FUND_SHORT_NAME]
		,m.[LONG_SHORT_IND]
		,m.[POSITION_DATE]
		,m.[DATA_DATE]
		,m.[QUANTITY]
	FROM 
		@positions m
),
CTE_Securities AS
(
	SELECT m.[EDM_SEC_ID]
		  ,COALESCE(o.[SECURITY_NAME], m.[SECURITY_NAME]) AS [SECURITY_NAME]
		  ,COALESCE(o.[SECURITY_SHORTNAME], m.[SECURITY_SHORTNAME]) AS [SECURITY_SHORTNAME]
		  ,COALESCE(o.[ASSET_TYPE], m.[ASSET_TYPE]) AS [ASSET_TYPE]
		  ,COALESCE(o.[SECURITY_ISO_CCY], m.[SECURITY_ISO_CCY]) AS [SECURITY_ISO_CCY] 
		  ,COALESCE(o.[SECURITY_TYPE], m.[SECURITY_TYPE]) AS [SECURITY_TYPE]
		  ,COALESCE(o.[TICKER], m.[TICKER]) AS [TICKER]
		  ,COALESCE(o.[UNIQUE_BLOOMBERG_ID], m.[UNIQUE_BLOOMBERG_ID]) AS [UNIQUE_BLOOMBERG_ID]
		  ,COALESCE(o.[PARSEKEYABLE_DESCRIPTION], m.[PARSEKEYABLE_DESCRIPTION]) AS [PARSEKEYABLE_DESCRIPTION]
		  ,COALESCE(o.[ISSUE_COUNTRY_ISO], m.[ISSUE_COUNTRY_ISO]) AS [ISSUE_COUNTRY_ISO]
	  FROM 
		[dbo].[T_MASTER_SEC] m
	  LEFT JOIN 
		[dbo].[T_OVERRIDE_SEC] o ON 
			m.[EDM_SEC_ID] = o.[EDM_SEC_ID]
	 LEFT JOIN
		[dbo].[T_MASTER_SEC_EQUITY] e ON 
			m.[EDM_SEC_ID] = e.[EDM_SEC_ID]
	LEFT JOIN
		[dbo].[T_OVERRIDE_SEC_EQUITY] oe ON 
			m.[EDM_SEC_ID] = oe.[EDM_SEC_ID]
),
CTE_FUND AS
(
SELECT [EDM_FND_ID]
      ,[SHORT_NAME]
      ,[LONG_NAME]
      ,null as [EDM_FUND_GROUP_ID]
      ,[START_DATE]
      ,[FUND_TYPE]
      ,[STATUS]
      ,[BASE_CURRENCY]
      ,[LOCATION]
      ,[CADIS_SYSTEM_INSERTED]
      ,[CADIS_SYSTEM_UPDATED]
      ,[CADIS_SYSTEM_CHANGEDBY]
      ,[CADIS_SYSTEM_PRIORITY]
      ,'EOD' AS [VALUATION_PERIOD]
  FROM [dbo].[T_MASTER_FND] 
),
CTE_PRICE AS
(
	SELECT 
	   m.[EDM_SEC_ID]
      ,m.[PRICE_TYPE]
      ,m.[PRICE_SOURCE]
      ,m.[PRICE_DATE]
      ,m.[PRICE_TIME]
      ,m.[AVERAGE_COST]
      ,m.[PRICE_SOURCE_RANKING]
      ,m.[PRICE_ISO_CCY]
      ,m.[MASTER_PRICE]
      ,m.[ASK_PRICE]
      ,m.[MID_PRICE]
      ,m.[BID_PRICE]
	  ,m.[IsCurrentPrice]
  FROM 
	@Prices m
),
CTE_FX AS (
	SELECT 
		   m.[FXRATE_ID]
		  ,m.[DATE]
		  ,COALESCE(o.[FROM_ISO_CURRENCY_CODE], m.[FROM_ISO_CURRENCY_CODE]) AS [FROM_ISO_CURRENCY_CODE]
		  ,COALESCE(o.[TO_ISO_CURRENCY_CODE], m.[TO_ISO_CURRENCY_CODE]) AS [TO_ISO_CURRENCY_CODE]
		  ,COALESCE(o.[SPOT_RATE], m.[SPOT_RATE]) AS [SPOT_RATE]
		  ,COALESCE(o.[1_MONTH_FORWARD_RATE], m.[1_MONTH_FORWARD_RATE]) AS [1_MONTH_FORWARD_RATE]
		  ,COALESCE(o.[2_MONTH_FORWARD_RATE], m.[2_MONTH_FORWARD_RATE]) AS [2_MONTH_FORWARD_RATE]
		  ,COALESCE(o.[3_MONTH_FORWARD_RATE], m.[3_MONTH_FORWARD_RATE]) AS [3_MONTH_FORWARD_RATE]
		  ,COALESCE(o.[6_MONTH_FORWARD_RATE], m.[6_MONTH_FORWARD_RATE]) AS [6_MONTH_FORWARD_RATE]
		  ,COALESCE(o.[1_YEAR_FORWARD_RATE], m.[1_YEAR_FORWARD_RATE]) AS [1_YEAR_FORWARD_RATE]
		  ,COALESCE(o.[DATA_QUALITY], m.[DATA_QUALITY]) AS [DATA_QUALITY]
	  FROM 
		[dbo].[T_MASTER_FXRATE] m
	  LEFT JOIN
		[dbo].[T_OVERRIDE_FXRATE] o ON
			m.[FXRATE_ID] = o.[FXRATE_ID] AND
			m.[DATE] = o.[DATE]
)
INSERT @returntable
SELECT 
		[POSITION_DATE]
      ,[FUND_SHORT_NAME]
	  ,[EDM_SEC_ID]
	  ,[UNIQUE_BLOOMBERG_ID]
	  ,[POSITION_TYPE]
	  ,[SECURITY_SHORTNAME]
	  ,[PARSEKEYABLE_DESCRIPTION]
	  ,[SECURITY_ISO_CCY]
      ,[LONG_SHORT_IND]
      ,[QUANTITY]
	  ,[IsUnquoted]
	  ,EODPrice
	  ,MidPrice
	  ,PreviousEODPrice
	  ,PreviousMidPrice
	  ,Multiplier
	  ,FX
	  ,PreviousFx
	  ,MARKET_VALUE_LOCAL
	  ,MARKET_VALUE_BASE
	  ,PRICE_DATE
	  ,ISSUE_COUNTRY_ISO
	  ,ASSET_TYPE
	  FROM
	  (
SELECT 
	  pos.[POSITION_DATE]
      ,pos.[FUND_SHORT_NAME]
	  ,pos.[POSITION_TYPE]
	  ,sec.[EDM_SEC_ID]
	  ,sec.[UNIQUE_BLOOMBERG_ID]
	  ,sec.[SECURITY_SHORTNAME]
	  ,sec.[PARSEKEYABLE_DESCRIPTION]
	  ,sec.[SECURITY_ISO_CCY]
      ,pos.[LONG_SHORT_IND]
      ,pos.[QUANTITY]
	  ,(CASE WHEN sec.[TICKER] = '.RM2PRF' THEN 0 WHEN LEFT(sec.[TICKER],1) = '.' OR LEFT(sec.[TICKER],1) = '0' THEN 1 ELSE 0 END) AS [IsUnquoted]
	  ,COALESCE((CASE WHEN price.PRICE_TYPE = 'EOD' AND price.IsCurrentPrice = 1 THEN price.MASTER_PRICE END), up.MASTER_PRICE) AS EODPrice
	  ,COALESCE((CASE WHEN price.PRICE_TYPE = 'Midday Mid' AND price.IsCurrentPrice = 1 THEN price.MASTER_PRICE END), up.MASTER_PRICE) AS MidPrice
	  ,COALESCE((CASE WHEN price.PRICE_TYPE = 'EOD' AND price.IsCurrentPrice = 0 THEN price.MASTER_PRICE END), up.MASTER_PRICE) AS PreviousEODPrice
	  ,COALESCE((CASE WHEN price.PRICE_TYPE = 'Midday Mid' AND price.IsCurrentPrice = 0 THEN price.MASTER_PRICE END), up.MASTER_PRICE)  AS PreviousMidPrice
	  ,(CASE WHEN UPPER(
			COALESCE(sec.[SECURITY_ISO_CCY], Price.[PRICE_ISO_CCY]) --PriceCCY
			) COLLATE Latin1_General_CS_AS = 
			COALESCE(sec.[SECURITY_ISO_CCY], Price.[PRICE_ISO_CCY]) --PriceCCY
				COLLATE Latin1_General_CS_AS THEN 1.0 ELSE 0.01 END) AS Multiplier
		, (CASE WHEN 
			COALESCE(Price.[PRICE_ISO_CCY], sec.[SECURITY_ISO_CCY]) --PriceCCY
			= fund.[BASE_CURRENCY] THEN 1 ELSE COALESCE(fx.[SPOT_RATE], FxLatest.[SPOT_RATE]) END
		) AS FX
		, (CASE WHEN 
			COALESCE(Price.[PRICE_ISO_CCY], sec.[SECURITY_ISO_CCY]) --PriceCCY
			= fund.[BASE_CURRENCY] THEN 1 ELSE prevFx.[SPOT_RATE] END
		) AS PreviousFX
		,(pos.[QUANTITY] * 
			(CASE WHEN UPPER(
			COALESCE(sec.[SECURITY_ISO_CCY], Price.[PRICE_ISO_CCY]) --PriceCCY
			) COLLATE Latin1_General_CS_AS = 
			COALESCE(sec.[SECURITY_ISO_CCY], Price.[PRICE_ISO_CCY]) --PriceCCY
				COLLATE Latin1_General_CS_AS THEN 1.0 ELSE 0.01 END) -- Multiplier
		* 
		COALESCE(price.[MASTER_PRICE], up.MASTER_PRICE) -- EOD Price
		) AS MARKET_VALUE_LOCAL
		,(pos.[QUANTITY] * 
			(CASE WHEN UPPER(
			COALESCE(sec.[SECURITY_ISO_CCY], Price.[PRICE_ISO_CCY]) --PriceCCY
			) COLLATE Latin1_General_CS_AS = 
			COALESCE(sec.[SECURITY_ISO_CCY], Price.[PRICE_ISO_CCY]) --PriceCCY
				COLLATE Latin1_General_CS_AS THEN 1.0 ELSE 0.01 END) -- Multiplier
		* 
		COALESCE(price.[MASTER_PRICE], up.MASTER_PRICE) -- EOD Price
			*
				(CASE WHEN 
			COALESCE(Price.[PRICE_ISO_CCY], sec.[SECURITY_ISO_CCY]) --PriceCCY
			= fund.[BASE_CURRENCY] THEN 1 ELSE  (CASE WHEN price.IsCurrentPrice = 1 THEN COALESCE(fx.[SPOT_RATE], FxLatest.[SPOT_RATE]) WHEN up.MASTER_PRICE IS NOT NULL THEN COALESCE(fx.[SPOT_RATE], FxLatest.[SPOT_RATE]) ELSE prevFx.[SPOT_RATE] END) END
				) -- fx
		) AS MARKET_VALUE_BASE
		, CONVERT(DATETIME, LEFT(CONVERT(DATE,Price.PRICE_DATE),10) + ' ' + LEFT(ISNULL(Price.PRICE_TIME,'00:00'),5) + ':00') AS PRICE_DATE
		, sec.ISSUE_COUNTRY_ISO
		, sec.ASSET_TYPE
  FROM 
	CTE_Positions pos
  LEFT JOIN 
	CTE_Securities sec ON 
		pos.[EDM_SEC_ID] = sec.[EDM_SEC_ID]
  LEFT JOIN 
	CTE_PRICE Price ON 
		Price.[EDM_SEC_ID] = sec.[EDM_SEC_ID]
  LEFT JOIN
	CTE_FUND fund ON
		pos.[FUND_SHORT_NAME] = fund.[SHORT_NAME]
  LEFT JOIN 
	CTE_FX fx ON 
		fx.[FXRATE_ID] = ISNULL(
			COALESCE(Price.[PRICE_ISO_CCY], sec.[SECURITY_ISO_CCY]) --PriceCCY 
			,'') + ISNULL(fund.[BASE_CURRENCY],'') AND 
		fx.[DATE] = pos.[POSITION_DATE]
  LEFT JOIN 
	CTE_FX prevFx ON 
		prevFx.[FXRATE_ID] = ISNULL(
			COALESCE(Price.[PRICE_ISO_CCY], sec.[SECURITY_ISO_CCY]) --PriceCCY 
			,'') + ISNULL(fund.[BASE_CURRENCY],'') AND 
		prevFx.[DATE] = (CASE WHEN DATENAME(DW, pos.[POSITION_DATE]) = 'MONDAY' THEN DATEADD(dd, -3, pos.[POSITION_DATE]) ELSE DATEADD(dd, -1, pos.[POSITION_DATE]) END)
LEFT JOIN 
	CTE_FX FxLatest ON 
		FxLatest.[FXRATE_ID] = ISNULL(
			COALESCE(Price.[PRICE_ISO_CCY], sec.[SECURITY_ISO_CCY]) --PriceCCY 
			,'') + ISNULL(fund.[BASE_CURRENCY],'') AND 
		FxLatest.[DATE] = pos.[DATA_DATE]
LEFT JOIN @UnquotedPrices up ON up.EDM_SEC_ID = pos.EDM_SEC_ID
	) data
		ORDER BY [POSITION_DATE], [FUND_SHORT_NAME], EDM_SEC_ID
	RETURN;
END;

