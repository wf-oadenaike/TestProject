CREATE FUNCTION [Access.WebDev].[ufn_NTCashLadderSummaryFundTotal]
(
    @TDate DATE = NULL
)
RETURNS @Output TABLE 
		(
       [Fund] VARCHAR(10),
       [AsOfDate]    DATETIME,
       [TMinus1]     DECIMAL(18, 2),
       [T]    DECIMAL(18, 2),
       [Tplus1]      DECIMAL(18, 2),
       [Tplus2]      DECIMAL(18, 2),
       [Tplus3]      DECIMAL(18, 2),
       [Tplus4]      DECIMAL(18, 2),
       [Tplus5]      DECIMAL(18, 2)
	   )
AS
-------------------------------------------------------------------------------------- 
-- Name: [Access.WebDev].[ufn_NTCashLadderSummaryFundTotal]
-- 
-- Params: @TDate DATE - Trade date for which the function is to be run for.
-- 
-------------------------------------------------------------------------------------- 
-- History:
-- R. Dixon: 14/02/2018 DAP-1648	Created
-- R. Dixon: 28/02/2018 DAP-1648	Amended to use 'Projected Closing Balance' if present, 
--									otherwise use 'Actual Closing Balance', else use 'closing balance' for a given ccy, date, fund
-- R. Dixon: 29/03/2018 DAP-1898	Return data between T-1 and T+5 business days
-------------------------------------------------------------------------------------- 

BEGIN

IF  @TDATE IS NULL SET @TDATE = GETDATE()

DECLARE @TOTALS TABLE 
       (
       [FUND_SHORT_NAME]    VARCHAR(10),
       [D_CURR_DATE] DATETIME,
       [CCY_NAME]    VARCHAR(30),
       [T_NARR_LONG] VARCHAR(230),
       [AMT_GBP]     DECIMAL(18, 2)
       )

DECLARE @DATES TABLE 
              (
              [D_CURR_DATE]        DATETIME,
              [ORDERID]            INTEGER
              )

INSERT	INTO @DATES
SELECT	DT.D_CURR_DATE, ROW_NUMBER() OVER (ORDER BY D_CURR_DATE ASC) AS ORDERID
FROM
        (
        -- T
        SELECT	MAX([CALENDARDATE])  AS D_CURR_DATE
        FROM	[CORE].[CALENDAR]  
        WHERE	[CALENDARDATE] <= @TDATE 
        AND		ISHOLIDAYUK = 0
		AND		ISWEEKDAY = 1
        UNION
        -- T-1
        SELECT	MAX([CALENDARDATE]) AS D_CURR_DATE
        FROM	[CORE].[CALENDAR]
        WHERE	[CALENDARDATE] <= @TDATE 
		AND		ISHOLIDAYUK = 0
		AND		ISWEEKDAY = 1
        AND		[CALENDARDATE] NOT IN
                (
                SELECT MAX([CALENDARDATE]) 
                FROM   [CORE].[CALENDAR]
                WHERE  [CALENDARDATE] <= @TDATE 
				AND		ISHOLIDAYUK = 0
				AND		ISWEEKDAY = 1
                )
        UNION
        -- T+1 TO T+5
        SELECT DISTINCT TOP 5 [CALENDARDATE]
        FROM	[CORE].[CALENDAR]
        WHERE	[CALENDARDATE] > @TDATE 
		AND		ISHOLIDAYUK = 0
		AND		ISWEEKDAY = 1
		ORDER	BY [CALENDARDATE] ASC
        ) DT

INSERT	INTO   @TOTALS([FUND_SHORT_NAME], [D_CURR_DATE], [CCY_NAME], [T_NARR_LONG], [AMT_GBP])
SELECT	CP.[FUND_SHORT_NAME], CP.[D_CURR_DATE], CP.[CCY_NAME], CP.[T_NARR_LONG],
		CASE 
			WHEN [C_BSE_CCY] = 'GBP' THEN [A_TRAN_RP_BASE]
			WHEN [C_BSE_CCY] <> 'GBP' AND CCY = 'GBP' THEN [A_TRAN_AMT]
			WHEN [C_BSE_CCY] <> 'GBP' AND CCY <> 'GBP' THEN ([A_TRAN_AMT]/ISNULL(FX.[SPOT_RATE], 1))
		END AS [AMT_GBP]
FROM   
		(
		SELECT	ROW_NUMBER() OVER (PARTITION BY FUND_SHORT_NAME, CCY, D_CURR_DATE, CCY_NAME, I_TRAN  ORDER BY C_REC_TYPE DESC) AS [ROWNUM], * 
		FROM	[T_NT_CASH_PROJECT] 
		) CP
INNER  JOIN @DATES D
ON		D.[D_CURR_DATE] = CP.[D_CURR_DATE]
LEFT	OUTER JOIN [DBO].[T_MASTER_FXRATE] FX    
ON		CONVERT(DATE,FX.[DATE]) = (SELECT MAX(CONVERT(DATE,[DATE])) FROM [DBO].[T_MASTER_FXRATE]) 
AND		FX.[FROM_ISO_CURRENCY_CODE] = 'GBP'
AND		FX.[TO_ISO_CURRENCY_CODE] = CP.[CCY]
WHERE	CP.ROWNUM = 1

-- INSERT T-1 (OPENING BALANCE) 
INSERT	@OUTPUT
        (
        [FUND],
        [ASOFDATE],
        [TMINUS1]
        )
SELECT	F.SHORT_NAME, 
		(SELECT [D_CURR_DATE] FROM @DATES WHERE [ORDERID]  = 2),
		ISNULL(T.[AMT_GBP],0)
FROM	[dbo].[T_MASTER_FND] F
LEFT	OUTER JOIN 
        (SELECT       [FUND_SHORT_NAME], [D_CURR_DATE], SUM(AMT_GBP) AS AMT_GBP
        FROM   @TOTALS
        WHERE [D_CURR_DATE] = (SELECT D_CURR_DATE FROM @DATES WHERE ORDERID  = 1)
        AND           [T_NARR_LONG] <> 'ACTUAL CLOSING BALANCE'
        GROUP  BY [FUND_SHORT_NAME], [D_CURR_DATE]
        ) T
ON		F.SHORT_NAME = T.FUND_SHORT_NAME
WHERE	F.VALUATION_PERIOD IS NOT NULL


UPDATE O
SET O.T = ISNULL(Y.AMT_GBP,0)
FROM @OUTPUT O
LEFT OUTER JOIN 
       (
       SELECT FUND_SHORT_NAME, SUM(AMT_GBP) AS AMT_GBP FROM 
       (
       SELECT FUND_SHORT_NAME, D_CURR_DATE, CCY_NAME, SUM(AMT_GBP) AS AMT_GBP, ROW_NUMBER() OVER(PARTITION BY FUND_SHORT_NAME, CCY_NAME ORDER BY D_CURR_DATE DESC) AS ROWNUM
       FROM @TOTALS 
       WHERE	(
				D_CURR_DATE IN (SELECT [D_CURR_DATE] FROM @DATES WHERE [ORDERID]  IN (1,2))
				) 
       GROUP BY FUND_SHORT_NAME, D_CURR_DATE, CCY_NAME
       ) X
       WHERE X.ROWNUM = 1
       GROUP BY FUND_SHORT_NAME
       ) Y
ON Y.FUND_SHORT_NAME = O.FUND

UPDATE O
SET O.TPLUS1 = ISNULL(Y.AMT_GBP,0)
FROM @OUTPUT O
LEFT OUTER JOIN 
       (
       SELECT FUND_SHORT_NAME, SUM(AMT_GBP) AS AMT_GBP FROM 
       (
       SELECT FUND_SHORT_NAME, D_CURR_DATE, CCY_NAME, SUM(AMT_GBP) AS AMT_GBP, ROW_NUMBER() OVER(PARTITION BY FUND_SHORT_NAME, CCY_NAME ORDER BY D_CURR_DATE DESC) AS ROWNUM
       FROM @TOTALS 
       WHERE	(
				D_CURR_DATE IN (SELECT [D_CURR_DATE] FROM @DATES WHERE [ORDERID]  IN (1,2,3))
				) 
       GROUP BY FUND_SHORT_NAME, D_CURR_DATE, CCY_NAME
       ) X
       WHERE X.ROWNUM = 1
       GROUP BY FUND_SHORT_NAME
       ) Y
ON Y.FUND_SHORT_NAME = O.FUND


UPDATE O
SET O.TPLUS2 = ISNULL(Y.AMT_GBP,0)
FROM @OUTPUT O
LEFT OUTER JOIN 
       (
       SELECT FUND_SHORT_NAME, SUM(AMT_GBP) AS AMT_GBP FROM 
       (
       SELECT FUND_SHORT_NAME, D_CURR_DATE, CCY_NAME, SUM(AMT_GBP) AS AMT_GBP, ROW_NUMBER() OVER(PARTITION BY FUND_SHORT_NAME, CCY_NAME ORDER BY D_CURR_DATE DESC) AS ROWNUM
       FROM @TOTALS 
WHERE	(
		D_CURR_DATE IN (SELECT [D_CURR_DATE] FROM @DATES WHERE [ORDERID]  IN (1,2,3,4))
		)
       GROUP BY FUND_SHORT_NAME, D_CURR_DATE, CCY_NAME
       ) X
       WHERE X.ROWNUM = 1
       GROUP BY FUND_SHORT_NAME
       ) Y
ON Y.FUND_SHORT_NAME = O.FUND

UPDATE O
SET O.TPLUS3 = ISNULL(Y.AMT_GBP,0)
FROM @OUTPUT O
LEFT OUTER JOIN 
       (
       SELECT FUND_SHORT_NAME, SUM(AMT_GBP) AS AMT_GBP FROM 
       (
       SELECT FUND_SHORT_NAME, D_CURR_DATE, CCY_NAME, SUM(AMT_GBP) AS AMT_GBP, ROW_NUMBER() OVER(PARTITION BY FUND_SHORT_NAME, CCY_NAME ORDER BY D_CURR_DATE DESC) AS ROWNUM
       FROM @TOTALS 
	   WHERE	(
		D_CURR_DATE IN (SELECT [D_CURR_DATE] FROM @DATES WHERE [ORDERID]  IN (1,2,3,4,5))
		)
       GROUP BY FUND_SHORT_NAME, D_CURR_DATE, CCY_NAME
       ) X
       WHERE X.ROWNUM = 1
       GROUP BY FUND_SHORT_NAME
       ) Y
ON Y.FUND_SHORT_NAME = O.FUND

UPDATE O
SET O.TPLUS4 = ISNULL(Y.AMT_GBP,0)
FROM @OUTPUT O
LEFT OUTER JOIN 
       (
       SELECT FUND_SHORT_NAME, SUM(AMT_GBP) AS AMT_GBP FROM 
       (
       SELECT FUND_SHORT_NAME, D_CURR_DATE, CCY_NAME, SUM(AMT_GBP) AS AMT_GBP, ROW_NUMBER() OVER(PARTITION BY FUND_SHORT_NAME, CCY_NAME ORDER BY D_CURR_DATE DESC) AS ROWNUM
       FROM @TOTALS 
	   WHERE	(
		D_CURR_DATE IN (SELECT [D_CURR_DATE] FROM @DATES WHERE [ORDERID]  IN (1,2,3,4,5,6))
		)
       GROUP BY FUND_SHORT_NAME, D_CURR_DATE, CCY_NAME
       ) X
       WHERE X.ROWNUM = 1
       GROUP BY FUND_SHORT_NAME
       ) Y
ON Y.FUND_SHORT_NAME = O.FUND

UPDATE O
SET O.TPLUS5 = ISNULL(Y.AMT_GBP,0)
FROM @OUTPUT O
LEFT OUTER JOIN 
       (
       SELECT FUND_SHORT_NAME, SUM(AMT_GBP) AS AMT_GBP FROM 
       (
       SELECT FUND_SHORT_NAME, D_CURR_DATE, CCY_NAME, SUM(AMT_GBP) AS AMT_GBP, ROW_NUMBER() OVER(PARTITION BY FUND_SHORT_NAME, CCY_NAME ORDER BY D_CURR_DATE DESC) AS ROWNUM
       FROM @TOTALS 
	   WHERE	(
		D_CURR_DATE IN (SELECT [D_CURR_DATE] FROM @DATES WHERE [ORDERID]  IN (1,2,3,4,5,6,7 ))
		)
       GROUP BY FUND_SHORT_NAME, D_CURR_DATE, CCY_NAME
       ) X
       WHERE X.ROWNUM = 1
       GROUP BY FUND_SHORT_NAME
       ) Y
ON Y.FUND_SHORT_NAME = O.FUND

RETURN

END


