
CREATE FUNCTION [Access.WebDev].[ufn_GetNTBorrowingBaseWIMPCT]  ()


RETURNS
@OUTPUT TABLE
		(
		POSITION_DATE datetime NULL,
		FUND_SHORT_NAME varchar(20) NULL,
		QUOTED_EOD decimal (20,2) NULL,
		UNQUOTED_EOD decimal (20,2) NULL,
		CASH decimal (20,2) NULL,
		NT_BORROWING_CAPACITY decimal (20,2) NULL,
		NT_BORROWING_CAPACITY_PCT decimal (20,2) NULL,
		NT_BORROWING_CAPACITY_REMAINING_PCT decimal (20,2) NULL,
		CASH_REMAINING decimal (20,2) NULL,
		DRAWN_DOWN decimal (20,2) NULL,
		CASH_REMAINING_RAG_STATUS varchar(250) NULL,
		RAG_VALUE decimal (20,2) NULL,
		CASH_REMAINING_RED_THRESHOLD_PERCENT varchar(250) NULL,
		CASH_REMAINING_AMBER_THRESHOLD_PERCENT varchar(250) NULL,
		SIG_DATE varchar(250) NULL,
		DRAWNDOWN_RAG_STATUS varchar(20) NULL,
		DRAWNDOWN_TO_BORROWING_CAPACITY_DIFFERENCE decimal (20,2) NULL,
		DRAWNDOWN_AMBER_THRESHOLD decimal (20,2) NULL,
		AS_AT_DATE datetime NULL,
		AS_OF_DATE datetime NULL
		)

-------------------------------------------------------------------------------------- 
-- Name: [Access.WebDev].[ufn_GetNTBorrowingBaseWIMPCT]
-- 
-- Params:	
-------------------------------------------------------------------------------------- 
-- History:
-- R. Dixon: 23/07/2018 DAP-2007 created
-- Olu: 18/09/2018 DAP-2295 Add RAG_VALUE & RAG_STATUS and Next Day Forecast 
-- Olu: 12/11/2018 DAP-2402 T+2 
 --Olu: 12/11/2018 DAP-2402 Change Drawdown Logic for  T+2 
 --Olu: 09/01/2019 DAP-2373 Add further rules to Borrowing Base Logic 
 --Olu 11/02/2019 DAP-2526 Chnage DrawDown Calcaultion to bring back latest value using AsOfDate
-------------------------------------------------------------------------------------- 
--AS
BEGIN 

DECLARE	@POSDATE DATETIME
DECLARE	@MAXPOSDATE DATETIME
DECLARE @POSITION_DATE DATETIME
DECLARE	@PREV_NAV_EOD DECIMAL(20,2)
DECLARE	@PREV_UNQUOTED_EOD DECIMAL(20,2)


DECLARE	@CASH DECIMAL(20,2)
DECLARE	@DRAWDOWN DECIMAL(20,2)
DECLARE	@PREV_NT_BORROWING_BASE DECIMAL(20,2)
DECLARE	@PREV_NT_BORROWING_BASE_PCT DECIMAL(20,2)
DECLARE	@PREV_NT_BORROWING_REMAINING_BASE_PCT DECIMAL(20,2)
DECLARE	@CASH_REMAINING DECIMAL(20,2)
DECLARE	@CASH_IN_BANK DECIMAL(20,2)
DECLARE	@RAG_STATUS VARCHAR(20)
DECLARE @RAG_VALUE DECIMAL(20,2)
DECLARE @FUND VARCHAR(20) = 'WIMPCT'
DECLARE @CASH_DIFFERENCE_THRESHOLD DECIMAL(20,2) = 250000
DECLARE @RED_THRESHOLD_PCT DECIMAL(20,2) = 10
DECLARE @AMBER_THRESHOLD_PCT DECIMAL(20,2) = 20
DECLARE @AS_AT_DATE DATETIME
DECLARE @AS_OF_DATE DATETIME
DECLARE @NAV DECIMAL(20,2)
DECLARE @NT_BORROWING_CAPACITY DECIMAL(20,2)
DECLARE @1STNTRULE DECIMAL(20,2)
DECLARE @2NDNTRULE DECIMAL(20,2)
DECLARE @3RDNTRULE DECIMAL(20,2)
DECLARE @CASH_REMAINING_RAG_STATUS VARCHAR(20)
DECLARE @CASH_REMAINING_RAG_VALUE  DECIMAL(20,2)



---Fast Forward to T+2	
DECLARE @DAYSFWD int = 3




SET @MAXPOSDATE = 
		(
		SELECT	CALENDARDATE
		FROM	(SELECT	CALENDARDATE, ROW_NUMBER() OVER(ORDER BY CALENDARDATE ASC) AS ROWNUM
				FROM	CORE.CALENDAR 
				WHERE	CALENDARDATE >= CAST(GETDATE() AS DATE)
				AND		ISHOLIDAYUK = 0
				AND		ISWEEKDAY = 1
				) DATES
		WHERE	DATES.ROWNUM = @DAYSFWD
		)




SET @POSDATE = (SELECT MAX(POSITION_DATE) FROM T_MASTER_POS WHERE FUND_SHORT_NAME = 'WIMPCT')



INSERT	INTO @OUTPUT(POSITION_DATE, FUND_SHORT_NAME, QUOTED_EOD, UNQUOTED_EOD, CASH,DRAWN_DOWN, AS_AT_DATE, AS_OF_DATE,  CASH_REMAINING_RED_THRESHOLD_PERCENT, CASH_REMAINING_AMBER_THRESHOLD_PERCENT, SIG_DATE , DRAWNDOWN_AMBER_THRESHOLD)
SELECT	CAST(NAV.POSITION_DATE AS DATE)													AS POSITION_DATE
		,ISNULL(NAV.FUND_SHORT_NAME, 0)													AS FUND_SHORT_NAME
		,ISNULL(WIM.TOTAL_FUND_MKT_VALUE, 0)											AS EOD
		,ISNULL(UNQ.STOCK_FUND_MKT_VALUE, 0)											AS UNQUOTED_EOD
		,ISNULL(CASH.LOCAL_VALUE,0)														AS CASH
		,ISNULL(CASH_IN_BANK.LOCAL_VALUE,0)												AS CASH_IN_BANK
		,WIM.AS_AT_DATE																	AS AS_AT_DATE
		,@POSDATE
		,RED_THRESHOLD_PCT = @RED_THRESHOLD_PCT
		,AMBER_THRESHOLD_PCT = @AMBER_THRESHOLD_PCT
		
		,'T+0'
		
	   ,CASH_DIFFERENCE_THRESHOLD = @CASH_DIFFERENCE_THRESHOLD
	   
 
FROM	T_MASTER_FND_MARKET_VALUE NAV

LEFT	OUTER JOIN 
			(SELECT	POS.FUND_SHORT_NAME, POS.POSITION_DATE, 
			SUM( PRC.BID_PRICE * POS.QUANTITY / PRC.FX_RATE) 
					
									AS STOCK_FUND_MKT_VALUE
					FROM	[DBO].[T_MASTER_PRC] PRC
					INNER	JOIN [DBO].[T_MASTER_POS]  POS    
					ON		POS.EDM_SEC_ID = PRC.EDM_SEC_ID
					AND		POS.POSITION_DATE = PRC.PRICE_DATE
					INNER	JOIN [DBO].[T_MASTER_SEC]  SEC    
					ON		SEC.EDM_SEC_ID = POS.EDM_SEC_ID
					WHERE	(
							(SEC.TICKER LIKE '%.%' OR SEC.TICKER LIKE '%NWBO%')
							OR POS.EDM_SEC_ID IN ( 700000467, 700000468, 700000469, 700000470, 700000471, 700000472, 700000473, 700000485,700000513,700000512,700000511)
							)
					AND		PRC.PRICE_TYPE = 'EOD'
					AND		(POS.FUND_SHORT_NAME   = 'WIMPCT') 
					GROUP	BY POS.FUND_SHORT_NAME, POS.POSITION_DATE
					)UNQ
ON		UNQ.POSITION_DATE = CAST(NAV.POSITION_DATE AS DATE) AND UNQ.FUND_SHORT_NAME = NAV.FUND_SHORT_NAME


LEFT	OUTER JOIN 
		(
		SELECT	FUND_SHORT_NAME, POSITION_DATE, SUM(TOTAL_FUND_MKT_VALUE) AS TOTAL_FUND_MKT_VALUE, MAX(CADIS_SYSTEM_INSERTED) as AS_AT_DATE
		FROM	(		
				SELECT	CASE
						WHEN PRICE_ISO_CCY COLLATE Latin1_General_CS_AS <> 'GBP' AND PRICE_ISO_CCY = 'GBP' THEN   (PRC.BID_PRICE/100) * POS.QUANTITY / PRC.FX_RATE 
						ELSE PRC.BID_PRICE * POS.QUANTITY / PRC.FX_RATE 
						END AS TOTAL_FUND_MKT_VALUE, POS.FUND_SHORT_NAME, POS.POSITION_DATE, POS.CADIS_SYSTEM_INSERTED
				FROM	[DBO].[T_MASTER_POS]  POS
				INNER	JOIN [DBO].[T_MASTER_PRC] PRC
				ON		PRC.EDM_SEC_ID = POS.EDM_SEC_ID
				AND		POS.POSITION_DATE = PRC.PRICE_DATE
				INNER	JOIN [DBO].[T_MASTER_SEC]  SEC
				ON		SEC.EDM_SEC_ID = POS.EDM_SEC_ID
				WHERE	PRC.PRICE_TYPE = 'EOD'
				AND		POS.FUND_SHORT_NAME   = 'WIMPCT'
				AND 	NOT (SEC.TICKER LIKE '%.%' OR SEC.TICKER LIKE '%NWBO%')
				AND		POS.EDM_SEC_ID NOT IN ( 700000467, 700000468, 700000469, 700000470, 700000471, 700000472, 700000473, 700000485,700000513,700000512,700000511)
				) X GROUP BY x.FUND_SHORT_NAME, X.POSITION_DATE
		) WIM
ON		WIM.FUND_SHORT_NAME = NAV.FUND_SHORT_NAME
AND		WIM.POSITION_DATE = CAST(NAV.POSITION_DATE AS DATE)

LEFT	OUTER JOIN(SELECT	C.POSITION_DATE, C.FUND_SHORT_NAME, SUM(C.BASE_VALUE) LOCAL_VALUE 
					FROM	T_MASTER_POS_ACCOUNT_BALANCE C 
					WHERE	C.FUND_SHORT_NAME IN ('WIMPCT') 
					GROUP	BY C.POSITION_DATE, C.FUND_SHORT_NAME) CASH 
ON		CASH.FUND_SHORT_NAME = NAV.FUND_SHORT_NAME AND CAST(CASH.POSITION_DATE AS DATE) = CAST(NAV.POSITION_DATE AS DATE)


LEFT	OUTER JOIN(SELECT 	C.POSITION_DATE, C.FUND_SHORT_NAME, SUM(C.BASE_VALUE) LOCAL_VALUE , ASSET_SUB_CATEGORY
					FROM	T_MASTER_POS_ACCOUNT_BALANCE C 
					WHERE	C.FUND_SHORT_NAME IN ('WIMPCT') 
					AND ASSET_SUB_CATEGORY = 'Invested cash (externally held)'
					GROUP	BY C.POSITION_DATE, C.FUND_SHORT_NAME,ASSET_SUB_CATEGORY) CASH_IN_BANK
ON		CASH_IN_BANK.FUND_SHORT_NAME = NAV.FUND_SHORT_NAME AND CAST(CASH_IN_BANK.POSITION_DATE AS DATE) = CAST(NAV.POSITION_DATE AS DATE)



WHERE	NAV.FUND_SHORT_NAME IN ('WIMPCT')
AND		NAV.POSITION_DATE = @POSDATE
AND		NAV.FUND_SHORT_NAME = @FUND




SET	@PREV_NAV_EOD = (SELECT TOP 1 QUOTED_EOD FROM @OUTPUT)

SET	@PREV_UNQUOTED_EOD = (SELECT TOP 1 UNQUOTED_EOD FROM @OUTPUT)
		
SET @CASH_IN_BANK = (SELECT TOP 1 DRAWN_DOWN FROM @OUTPUT)

SET @AS_AT_DATE = ( SELECT TOP 1 AS_AT_DATE FROM @OUTPUT)

SET @AS_OF_DATE = ( SELECT TOP 1 AS_OF_DATE FROM @OUTPUT)



--Borrowing Base Rule 1: 0.4 of QuotedEOD & 0.2 OfUnquoted
SET @1STNTRULE = (SELECT (0.4 * QUOTED_EOD) + (0.1 * UNQUOTED_EOD) FROM @OUTPUT)

--Borrowing Base Rule 2: 150m
SET @2NDNTRULE = (SELECT 150000000)

--Borrowing Base Rule 3: 20% of Nav 
SET @3RDNTRULE = (	SELECT 0.2 * [value] FROM [Access.WebDev].[ufn_GetAUMs](GETDATE())
				WHERE FUND_SHORT_NAME = 'wimpct')


-- NT Borrowing Base
SET @NT_BORROWING_CAPACITY = (select case when @1STNTRULE <= @2NDNTRULE and @1STNTRULE <= @3RDNTRULE then @1STNTRULE
									  when @2NDNTRULE <= @1STNTRULE and @2NDNTRULE <= @3RDNTRULE then @2NDNTRULE
									  when @3RDNTRULE <= @1STNTRULE and @3RDNTRULE <= @2NDNTRULE then @3RDNTRULE END
    )

UPDATE @OUTPUT
SET NT_BORROWING_CAPACITY = @NT_BORROWING_CAPACITY


SET @CASH_REMAINING_RAG_VALUE = (SELECT (NT_BORROWING_CAPACITY - ABS(ISNULL(CASH,0))) /NT_BORROWING_CAPACITY  * 100  FROM @OUTPUT)



SET @CASH_REMAINING_RAG_STATUS = (SELECT CASE WHEN   (NT_BORROWING_CAPACITY - ABS(ISNULL(CASH,0))) /NT_BORROWING_CAPACITY   * 100 <= 10 THEN 'RED'
										  WHEN   (NT_BORROWING_CAPACITY - ABS(ISNULL(CASH,0))) /NT_BORROWING_CAPACITY   * 100 <= 20 THEN 'AMBER'
										  WHEN   (NT_BORROWING_CAPACITY - ABS(ISNULL(CASH,0))) /NT_BORROWING_CAPACITY   * 100 > 20 THEN 'GREEN' END FROM @OUTPUT)



UPDATE @OUTPUT
SET   CASH_REMAINING_RAG_STATUS=  @CASH_REMAINING_RAG_STATUS,
	  RAG_VALUE = @CASH_REMAINING_RAG_VALUE
		

---Fast Forward to T+2


	DECLARE	FUTURE_CURSOR CURSOR FOR
		SELECT	CALENDARDATE
		FROM	(SELECT	CALENDARDATE, ROW_NUMBER() OVER(ORDER BY CALENDARDATE ASC) AS ROWNUM
				FROM	CORE.CALENDAR C
				WHERE	CALENDARDATE >= CAST(GETDATE() AS DATE)
				AND		ISHOLIDAYUK = 0
				AND		ISWEEKDAY = 1
				) DATES
		WHERE	DATES.ROWNUM = @DAYSFWD
		ORDER	BY DATES.CALENDARDATE ASC

OPEN	FUTURE_CURSOR

FETCH	NEXT FROM FUTURE_CURSOR
INTO	@POSITION_DATE

WHILE	@@FETCH_STATUS = 0

BEGIN 

-- Using Bloomberg Cash Ladder for T+2
SET @CASH = 	(SELECT	Tplus2
					FROM [Access.WebDev].ufn_CashLadderSummaryFundTotal (null) 
					WHERE	FUND =  'WIMPCT'
					)
			
SET @DRAWDOWN = (SELECT MAX(ValueGBP)
				 FROM [Access.WebDev].ufn_NTCashLadderSummary(GETDATE(), 'WIMPCT',@POSITION_DATE)
					WHERE CCY_NAME = 'LOAN ACCT'
					AND T_NARR_LONG in ('Projected Closing Balance','Actual Closing Balance','Closing Balance')
					and AsOfDate = ( select Max(AsOfDate)  FROM [Access.WebDev].ufn_NTCashLadderSummary(GETDATE(), 'WIMPCT', @POSITION_DATE)
										WHERE CCY_NAME = 'LOAN ACCT'
										AND T_NARR_LONG in ('Projected Closing Balance','Actual Closing Balance','Closing Balance')))



SET @CASH_REMAINING_RAG_VALUE = (SELECT (NT_BORROWING_CAPACITY - ABS(ISNULL(@CASH,0))) /(NT_BORROWING_CAPACITY) * 100  FROM @OUTPUT)
					

SET @CASH_REMAINING_RAG_STATUS = (SELECT CASE WHEN   (NT_BORROWING_CAPACITY - ABS(ISNULL(@CASH,0))) /(NT_BORROWING_CAPACITY)   * 100 <= 10 THEN 'RED'
										  WHEN   (NT_BORROWING_CAPACITY - ABS(ISNULL(@CASH,0))) /(NT_BORROWING_CAPACITY)   * 100 <= 20 THEN 'AMBER'
										  WHEN   (NT_BORROWING_CAPACITY - ABS(ISNULL(@CASH,0))) /(NT_BORROWING_CAPACITY)   * 100 > 20 THEN 'GREEN' END FROM @OUTPUT)


		

	INSERT	INTO @OUTPUT(POSITION_DATE, FUND_SHORT_NAME, QUOTED_EOD, UNQUOTED_EOD, CASH, DRAWN_DOWN, CASH_REMAINING, AS_AT_DATE, AS_OF_DATE, RAG_VALUE,  DRAWNDOWN_RAG_STATUS, SIG_DATE)
	SELECT		@POSITION_DATE, 
				'WIMPCT', 
				@PREV_NAV_EOD,
				@PREV_UNQUOTED_EOD,
				@CASH, 
				@DRAWDOWN , 
				@CASH_REMAINING, 
				@AS_AT_DATE, 
				@AS_OF_DATE,
				@CASH_REMAINING_RAG_VALUE,
				CASE WHEN  @DRAWDOWN + ((0.4 * @PREV_NAV_EOD) + (0.1 * @PREV_UNQUOTED_EOD)) > 250000 THEN 'GREEN'
										  WHEN @DRAWDOWN + ((0.4 * @PREV_NAV_EOD) + (0.1 * @PREV_UNQUOTED_EOD))  BETWEEN 0 AND 250000 THEN  'AMBER'
									      WHEN  @DRAWDOWN + ((0.4 * @PREV_NAV_EOD) + (0.1 * @PREV_UNQUOTED_EOD))  < 0 THEN  'RED' END,
				
			 	'T+2'



---Fast Forward to T+2	
FETCH	NEXT FROM FUTURE_CURSOR
INTO	@POSITION_DATE


END
CLOSE FUTURE_CURSOR
DEALLOCATE FUTURE_CURSOR


--Borrowing Base 

UPDATE @OUTPUT
SET NT_BORROWING_CAPACITY = @NT_BORROWING_CAPACITY



--UPDATE Other parameters		 
	 UPDATE @OUTPUT
	 SET 
		
		 NT_BORROWING_CAPACITY_PCT = ABS(100 * CASH/NT_BORROWING_CAPACITY),
		 CASH_REMAINING =  ABS(NT_BORROWING_CAPACITY) - ABS(CASH),
		 NT_BORROWING_CAPACITY_REMAINING_PCT = 100 - (100 * ABS(CASH)/ABS((NT_BORROWING_CAPACITY))),
		 CASH_REMAINING_RED_THRESHOLD_PERCENT = @RED_THRESHOLD_PCT,
		 CASH_REMAINING_AMBER_THRESHOLD_PERCENT = @AMBER_THRESHOLD_PCT,
		 CASH_REMAINING_RAG_STATUS = @CASH_REMAINING_RAG_STATUS,
		DRAWNDOWN_TO_BORROWING_CAPACITY_DIFFERENCE = DRAWN_DOWN + NT_BORROWING_CAPACITY,
		DRAWNDOWN_RAG_STATUS = CASE		WHEN  DRAWN_DOWN + NT_BORROWING_CAPACITY > 250000 THEN 'GREEN'
										  WHEN DRAWN_DOWN + NT_BORROWING_CAPACITY BETWEEN 0 AND 250000 THEN  'AMBER'
									      WHEN  DRAWN_DOWN + NT_BORROWING_CAPACITY < 0 THEN  'RED' 
										  END,
		 DRAWNDOWN_AMBER_THRESHOLD = @CASH_DIFFERENCE_THRESHOLD



		
	 RETURN 

END

 


	 
