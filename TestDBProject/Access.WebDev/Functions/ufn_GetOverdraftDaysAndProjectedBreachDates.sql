
--select * from [Access.WebDev].[ufn_GetOverdraftDaysAndProjectedBreachDates]() 

CREATE FUNCTION [Access.WebDev].[ufn_GetOverdraftDaysAndProjectedBreachDates]() 
RETURNS @Output TABLE (
   [FUND_SHORT_NAME] VARCHAR(20),
	[OVERDRAFTDAYS120] INTEGER NULL,
	[DAYSTILLBREACH120] INTEGER NULL,
	[BREACHDATE120] DATETIME NULL,
	[OVERDRAFTDAYS180] INTEGER NULL,
	[DAYSTILLBREACH180] INTEGER NULL,
	[BREACHDATE180] DATETIME NULL,
	[OVERDRAFTDAYS360] INTEGER NULL,
	[DAYSTILLBREACH360] INTEGER NULL,
	[BREACHDATE360] DATETIME NULL,
	[AsAtDate] DATETIME NULL,
	[AsOfDate] DATETIME NULL,
	PRIMARY KEY ([FUND_SHORT_NAME])

)

AS
-------------------------------------------------------------------------------------- 
-- Name: [Access.WebDev].[ufn_GetOverdraftDaysAndProjectedBreachDates]
-- 
-- Params:	
-------------------------------------------------------------------------------------- 
-- History:
-- R. Dixon: 22/03/2018 OPP-914 created
-- R. Dixon: 26/03/2018 OPP-914	breach levels changed to 181 days (for 360), 136 (180) and 109 (120). 
--								also exclude today from no of days till breach
-- R. Dixon: 03/07/2018 DAP-2154 Add 3 days as buffer to all OD Persistency calculations
-- OLU		04/10/2018 DAP-2325 Add AsAtDate and AsOfDate
-------------------------------------------------------------------------------------- 

BEGIN

	DECLARE @OVERDRAWN_DAYS AS TABLE
	(
	   [FUND_SHORT_NAME] VARCHAR(256) NOT NULL,
	   [CALENDAR_DATE] DATETIME NOT NULL,
	   [BUSINESS_DAY] INTEGER NULL,
	   [OVERDRAWN] INTEGER NULL
		PRIMARY KEY ([FUND_SHORT_NAME],[CALENDAR_DATE])
	)

	DECLARE	@POSITION_DATE DATETIME
	DECLARE	@CALENDAR_DATE DATETIME

	SET	@POSITION_DATE = CONVERT(DATE,GetDate())

	-- Insert overdrawn days, where there's no value, check for overdrawn value in most recent data - i.e. previous business day

	INSERT	INTO @OVERDRAWN_DAYS
			([FUND_SHORT_NAME],
			[CALENDAR_DATE],
			[BUSINESS_DAY],
			[OVERDRAWN])
	SELECT	F.SHORT_NAME,
			C.CALENDARDATE,
			0 AS BUSINESS_DAY, 
					BASE_VALUE  = CASE 
						WHEN (SELECT	TOP 1 BASE_VALUE 
							FROM	[T_MASTER_POS_ACCOUNT_BALANCE] P2 
							WHERE	P2.POSITION_DATE <= C.CALENDARDATE
							AND		P2.FUND_SHORT_NAME = F.SHORT_NAME 
							ORDER  BY P2.POSITION_DATE DESC, BASE_VALUE ASC) < 0 THEN 1 
						ELSE 0 END						
			FROM   T_MASTER_FND F
			CROSS  APPLY CORE.CALENDAR C
			WHERE	C.CALENDARDATE BETWEEN DATEADD(D,(-1 * 360), @POSITION_DATE) AND DATEADD(D,-1, @POSITION_DATE)
	
	-- For future days assume OVERDRAWN = 1
	INSERT	INTO @OVERDRAWN_DAYS
			([FUND_SHORT_NAME],
			[CALENDAR_DATE],
			[BUSINESS_DAY],
			[OVERDRAWN])
	SELECT	F.SHORT_NAME, 
			C.CALENDARDATE,
			CASE WHEN C.IsHolidayUK = 0 and C.IsWeekday = 1 THEN 1 ELSE 0 END AS BUSINESS_DAY,
			1 AS BASE_VALUE
	FROM	T_MASTER_FND F
	CROSS	APPLY CORE.CALENDAR C
	WHERE	C.CALENDARDATE BETWEEN @POSITION_DATE AND DATEADD(D, 360, @POSITION_DATE)
	
	INSERT	INTO @OUTPUT    
			(
			[FUND_SHORT_NAME],
			[OVERDRAFTDAYS120],
			[OVERDRAFTDAYS180],
			[OVERDRAFTDAYS360],
			[DAYSTILLBREACH120],
			[DAYSTILLBREACH180],
			[DAYSTILLBREACH360],
			[AsAtDate],
			[AsOfDate]
			)
	SELECT	OD360.FUND_SHORT_NAME, OD120.OVERDRAWN, OD180.OVERDRAWN, OD360.OVERDRAWN, -1, -1, -1, DT.LastUpdatedDate, ASOfDate
			FROM 
			(
			SELECT	FUND_SHORT_NAME, SUM(OVERDRAWN) + 3 AS OVERDRAWN
			FROM	@OVERDRAWN_DAYS
			WHERE	CALENDAR_DATE BETWEEN DATEADD(D, -360, @POSITION_DATE) AND DATEADD(D, -1, @POSITION_DATE) 
			GROUP	BY FUND_SHORT_NAME 
			) OD360
	LEFT OUTER JOIN
			(
			SELECT	FUND_SHORT_NAME, SUM(OVERDRAWN) + 3 AS OVERDRAWN
			FROM	@OVERDRAWN_DAYS
			WHERE	CALENDAR_DATE BETWEEN DATEADD(D, -180, @POSITION_DATE) AND DATEADD(D, -1, @POSITION_DATE) 
			GROUP	BY FUND_SHORT_NAME 
			) OD180
	ON		OD180.FUND_SHORT_NAME = OD360.FUND_SHORT_NAME
	LEFT	OUTER JOIN
			(
			SELECT	FUND_SHORT_NAME, SUM(OVERDRAWN) + 3 AS OVERDRAWN
			FROM	@OVERDRAWN_DAYS
			WHERE	CALENDAR_DATE BETWEEN DATEADD(D, -120, @POSITION_DATE) AND DATEADD(D, -1, @POSITION_DATE) 
			GROUP	BY FUND_SHORT_NAME 
			) OD120
	ON		OD120.FUND_SHORT_NAME = OD360.FUND_SHORT_NAME
	LEFT	OUTER JOIN
            (
            SELECT	FUND_SHORT_NAME, MAX(CADIS_SYSTEM_UPDATED) AS LastUpdatedDate, MAX(POSITION_DATE) AS ASOfDate
            FROM	[T_MASTER_POS_ACCOUNT_BALANCE] 
            GROUP	BY FUND_SHORT_NAME
            ) DT
	ON		DT.FUND_SHORT_NAME = OD360.FUND_SHORT_NAME


	DECLARE	DATE_CURSOR CURSOR FOR
			SELECT	CALENDAR_DATE
			FROM	@OVERDRAWN_DAYS
			WHERE	CALENDAR_DATE >= DATEADD(D, -1, @POSITION_DATE)
			GROUP	BY CALENDAR_DATE
			ORDER	BY CALENDAR_DATE ASC

	OPEN	DATE_CURSOR 

	FETCH	NEXT FROM DATE_CURSOR
	INTO	@CALENDAR_DATE

	-- loop through calendar days, one day at a time, calculating overdrawn totals for given day and updating breach fields if breached
	WHILE	@@FETCH_STATUS = 0
	BEGIN 

			UPDATE	o
			SET		o.BREACHDATE120 = CASE WHEN OD120.OVERDRAWN = 109 THEN
											CASE WHEN O.DAYSTILLBREACH120 = -1 THEN @CALENDAR_DATE ELSE ISNULL(o.BREACHDATE120, @CALENDAR_DATE) END ELSE ISNULL(o.BREACHDATE120, @CALENDAR_DATE)
										END,
					o.BREACHDATE180 = CASE WHEN OD180.OVERDRAWN = 136 THEN
											CASE WHEN O.DAYSTILLBREACH180 = -1 THEN @CALENDAR_DATE ELSE ISNULL(o.BREACHDATE180, @CALENDAR_DATE) END ELSE ISNULL(o.BREACHDATE180, @CALENDAR_DATE)
										END,
					o.BREACHDATE360 = CASE WHEN OD360.OVERDRAWN = 181 THEN
											CASE WHEN O.DAYSTILLBREACH360 = -1 THEN @CALENDAR_DATE ELSE ISNULL(o.BREACHDATE360, @CALENDAR_DATE) END ELSE ISNULL(o.BREACHDATE360, @CALENDAR_DATE)
										END,
					o.DAYSTILLBREACH120 = CASE WHEN OD120.OVERDRAWN = 109 THEN 
											CASE WHEN O.DAYSTILLBREACH120 = -1 THEN OD120.BUSINESS_DAY ELSE ISNULL(o.DAYSTILLBREACH120,0) END ELSE ISNULL(o.DAYSTILLBREACH120,0)
										END,
					o.DAYSTILLBREACH180 = CASE WHEN OD180.OVERDRAWN = 136 THEN
											CASE WHEN O.DAYSTILLBREACH180 = -1 THEN OD180.BUSINESS_DAY ELSE ISNULL(o.DAYSTILLBREACH180,0) END ELSE ISNULL(o.DAYSTILLBREACH180,0)
										END,
					o.DAYSTILLBREACH360 = CASE WHEN OD360.OVERDRAWN = 181 THEN 
											CASE WHEN O.DAYSTILLBREACH360 = -1 THEN OD360.BUSINESS_DAY  ELSE ISNULL(o.DAYSTILLBREACH360,0) END ELSE ISNULL(o.DAYSTILLBREACH360,0)
										END
			FROM	@OUTPUT o
			LEFT	OUTER JOIN
					(
					SELECT	FUND_SHORT_NAME, SUM(OVERDRAWN) + 3 AS OVERDRAWN, SUM(BUSINESS_DAY) - 1 AS BUSINESS_DAY
					FROM	@OVERDRAWN_DAYS
					WHERE	CALENDAR_DATE BETWEEN DATEADD(D, -359, @CALENDAR_DATE) AND @CALENDAR_DATE
					GROUP	BY FUND_SHORT_NAME 
					) OD360
			ON		OD360.FUND_SHORT_NAME = o.FUND_SHORT_NAME
			LEFT	OUTER JOIN
					(
					SELECT	FUND_SHORT_NAME, SUM(OVERDRAWN) + 3  AS OVERDRAWN, SUM(BUSINESS_DAY) - 1 AS BUSINESS_DAY
					FROM	@OVERDRAWN_DAYS
					WHERE	CALENDAR_DATE BETWEEN DATEADD(D, -179, @CALENDAR_DATE) AND @CALENDAR_DATE
					GROUP	BY FUND_SHORT_NAME 
					) OD180
			ON		OD180.FUND_SHORT_NAME = o.FUND_SHORT_NAME
			LEFT	OUTER JOIN
					(
					SELECT	FUND_SHORT_NAME, SUM(OVERDRAWN)  + 3 AS OVERDRAWN, SUM(BUSINESS_DAY) - 1 AS BUSINESS_DAY
					FROM	@OVERDRAWN_DAYS
					WHERE	CALENDAR_DATE BETWEEN DATEADD(D, -119, @CALENDAR_DATE) AND @CALENDAR_DATE
					GROUP	BY FUND_SHORT_NAME 
					) OD120
			ON		OD120.FUND_SHORT_NAME = o.FUND_SHORT_NAME


			FETCH	NEXT FROM DATE_CURSOR 
			INTO	@CALENDAR_DATE

	END

	CLOSE DATE_CURSOR
	DEALLOCATE DATE_CURSOR

	RETURN
END

