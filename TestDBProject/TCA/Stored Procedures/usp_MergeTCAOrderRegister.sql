

CREATE PROCEDURE [TCA].[usp_MergeTCAOrderRegister] AS
/******************************
** Desc:
** Auth: R Carter
** Date: 07/12/2016
**************************
** Change History
**************************
** JIRA			Date		Author		Description 
** ----			----------  -------		------------------------------------
**				01/01/2017  R.Carter	Initial Write
** DAP-1270     08/08/2017  D.Fanning   Amend calculations to only use ITG's for [dbo].[T_TCA_ITG_RESPONSE_ALLOCATIONS]
** DAP-1299		12/08/2017  D.Fanning   Amend [dbo].[T_TCA_ITG_RESPONSE_ALLOCATIONS aggregation to be AVG not SUM
** DAP-1313		23/08/2017  D.Fanning   Change the aggregation functions from AVG to weighted average for Execution price.
** DAP-1429		17/10/2017	D.Bacchus	Supress duplicates in the CTE and Merge
** DAP-1455		25/10/2017  W.Stubbs	Change join criteria between ra.Trader and p.PersonName
** DAP-1455		08/11/2017	W.Stubbs	Changed join to remove magic values, and join to Core.Persons table on the new BloombergID field
** DAP-1637		05/01/2018	W.Stubbs	Changed source of data from T_TCA_ITG_RESPONSE_ALLOCATIONS to T_TCA_ITG_RESPONSE_ALLOCATIONS_DEAGGREGATED
** DAP-1637ff	26/01/2018	W.Stubbs	Limited to Base orders only in the new deaggregated world
** DAP-1835		07/03/2018	W.Stubbs	Change criteria of eligibility for merge into TCAOrderRegister
** DAP-1903		06/04/2018	R.Walker	default null Brokers and Accounts
** DAP-1917		06/04/2018	R.Walker	Fix update mechanism
** DAP-2005		10/05/2018	R.Walker	Take the Account level information from the new Deagg column
** DAP-2016		14/05/2018	R.Walker	Take the "weighted avg" of the performance figures to give a more accurate view of the data
** DAP-2087		11/06/2018	R.Walker	Take Shares_By_Account where original allocation hasn't been aggregated or cancelled for more accurate values, if not, sum the weighted broker trades
** DAP-2165		05/07/2018	R.Walker	Update the VWAP lower Exception Threshold from -0.3 to -0.5 NOTE: REF this here so it will come up in searches [dbo].[ufn_DetectTCAException]
** DAP-2354		27/09/2018	R.Walker	TCA Exceptions showing incorrect Start and End dates where the Trade is in the US
** DAP-2343		12/10/2018	R.Walker	Two tolerance Exception Threshold for those with a P&L less than 10k
*******************************/
BEGIN TRY
	SET NOCOUNT ON;
	DECLARE	@strProcedureName		VARCHAR(100)	= '[TCA].[usp_MergeTCAOrderRegister]';
	DECLARE @OrderIds				TABLE (OrderId INT);

	WITH StartDateOrders_CTE AS
				(SELECT [ORDERID]
						,MIN(origReleaseDate) DECISION_DATE_TIME2
				FROM [dbo].[T_TCA_ITG_RESPONSE_ALLOCATIONS_DEAGGREGATED]
				GROUP BY [ORDERID]
				),
		EndDateOrders_CTE AS
				(SELECT [ORDERID]
					,MAX(origOrderEndDateTime) ORDER_END_DATE_TIME
				FROM [dbo].[T_TCA_ITG_RESPONSE_ALLOCATIONS_DEAGGREGATED]
				GROUP BY [ORDERID]
				),
		DistOrders_CTE AS -- take one record to display if there are multiple accounts / brokers. previous version didn't work as took the MIN Trade_Date_Time and MIN Account which could end up as a new composite pair not supported in the main dataset
				(SELECT ROW_NUMBER() OVER (PARTITION BY [ORDERID] ORDER BY ACCOUNT,BROKER) AS ORDERBY 
						,[ORDERID]
						,MIN(TRADE_DATE_TIME) TRADE_DATE_TIME
						,ACCOUNT
						,BROKER
				FROM [dbo].[T_TCA_ITG_RESPONSE_ALLOCATIONS_DEAGGREGATED]
				GROUP BY [ORDERID], ACCOUNT, BROKER 
				),
		DaysCompletion_CTE AS
				(SELECT [ORDERID]
					,MAX(DAYSTOCOMPLETION) DAYSTOCOMPLETION
				FROM [dbo].[T_TCA_ITG_RESPONSE_ALLOCATIONS_DEAGGREGATED]
				GROUP BY [ORDERID]
				),
		--Brokers_CTE AS
		--	(SELECT [ORDERID]
		--		,stuff((
		--		SELECT ',' + ISNULL([BROKER],'NO BROKER') + ' ('+CAST(CAST(SUM(CAST([TRADE_SHARES] AS Integer)) as int) as varchar)+') '
		--		FROM  [dbo].[T_TCA_ITG_RESPONSE_ALLOCATIONS_DEAGGREGATED] ra2
		--		WHERE ra2.ORDERID = ra1.ORDERID
		--		GROUP BY ISNULL([BROKER],'NO BROKER')
		--		for xml path('')
		--		),1,1,'') as Brokers
		--	FROM [dbo].[T_TCA_ITG_RESPONSE_ALLOCATIONS_DEAGGREGATED] ra1
		--	GROUP BY [ORDERID]
		--	),
		--Accounts_CTE AS
		--(SELECT [ORDERID]
		--	,stuff((
		--	SELECT ',' + [ACCOUNT] + ' ('+CAST(SUM(CAST([Shares_By_Account] as int)) as varchar)+') '
		--	FROM  (SELECT DISTINCT OrderID, Child_Order_Id, ISNULL([Account], 'NONE') AS Account, Shares_By_Account FROM dbo.T_TCA_ITG_RESPONSE_ALLOCATIONS_DEAGGREGATED) ra2
		--	WHERE ra2.ORDERID = ra1.ORDERID
		--	GROUP BY [ACCOUNT]
		--	for xml path('')
		--	),1,1,'') as Accounts
		--FROM [dbo].[T_TCA_ITG_RESPONSE_ALLOCATIONS_DEAGGREGATED] ra1
		--GROUP BY [ORDERID]
		--),
		SumOrders_CTE AS
			(SELECT [ORDERID]
			--(CASE WHEN (SUM(XX.TRADE_SHARES) / MIN(XX.ORDERSHARES) = 1) THEN 1 
			--	--when EXISTS(select YY.I_TSORDNUM  from [dbo].[T_BBG_TCA_TRADE_ORDERS_AUDIT] YY where YY.d_date > MIN(XX.DECISION_DATE_TIME) and YY.I_TSORDNUM = XX.[ORDERID] aND C_ORDSTATUS = 'COMPLETE' ) THEN 1 
			--ELSE 0 END) as IsOrderFilled		
			,IsOrderFilled = 1
			,SUM(CAST(XX.TOTAL_VALUE AS Float)) as TOTAL_VALUE

			,SUM(XX.TRADE_SHARES * XX.ORIG_PRICE) / SUM(XX.TRADE_SHARES) as ORIG_PRICE
			,SUM(XX.FILLED_PERCENT_OF_DAILY_VOLUME) as FILLED_PERCENT_OF_DAILY_VOLUME
				
			,SUM(XX.B1REALISEDCOSTBPS) as B1REALISEDCOSTBPS
			,SUM(xx.B1NETPCTCST * XX.TRADE_SHARES) / SUM(XX.TRADE_SHARES) * 100 AS B1NETPCTCST -- weighted avg
			,SUM(XX.B2REALISEDCOSTBPS) as B2REALISEDCOSTBPS
			,SUM(xx.B2NETPCTCST * XX.TRADE_SHARES) / SUM(XX.TRADE_SHARES) * 100 AS B2NETPCTCST
			,SUM(XX.B3REALISEDCOSTBPS) as B3REALISEDCOSTBPS
			,SUM(xx.B3NETPCTCST * XX.TRADE_SHARES) / SUM(XX.TRADE_SHARES) * 100 AS B3NETPCTCST
			,SUM(XX.B4REALISEDCOSTBPS) as B4REALISEDCOSTBPS
			,SUM(xx.B4NETPCTCST * XX.TRADE_SHARES) / SUM(XX.TRADE_SHARES) * 100 AS B4NETPCTCST
			,SUM(XX.B5REALISEDCOSTBPS) as B5REALISEDCOSTBPS
			,SUM(xx.B5NETPCTCST * XX.TRADE_SHARES) / SUM(XX.TRADE_SHARES)* 100 AS B5NETPCTCST
			,SUM(XX.B6REALISEDCOSTBPS) as B6REALISEDCOSTBPS
			,SUM(xx.B6NETPCTCST * XX.TRADE_SHARES) / SUM(XX.TRADE_SHARES) * 100 AS B6NETPCTCST
			,SUM(XX.B7REALISEDCOSTBPS) as B7REALISEDCOSTBPS
			,SUM(xx.B7NETPCTCST * XX.TRADE_SHARES) / SUM(XX.TRADE_SHARES) * 100 AS B7NETPCTCST
			,SUM(XX.B8REALISEDCOSTBPS) as B8REALISEDCOSTBPS
			,SUM(xx.B8NETPCTCST * XX.TRADE_SHARES) / SUM(XX.TRADE_SHARES) * 100 AS B8NETPCTCST
			,SUM(XX.B9REALISEDCOSTBPS) as B9REALISEDCOSTBPS
			,SUM(xx.B9NETPCTCST * XX.TRADE_SHARES) / SUM(XX.TRADE_SHARES) * 100 AS B9NETPCTCST
			,SUM(XX.B10REALISEDCOSTBPS) as B10REALISEDCOSTBPS
			,SUM(xx.B10NETPCTCST * XX.TRADE_SHARES) / SUM(XX.TRADE_SHARES) * 100 AS B10NETPCTCST
			,SUM(XX.B1NETREALDOLLAR) as B1NETREALDOLLAR
			,SUM(XX.B2NETREALDOLLAR) as B2NETREALDOLLAR
			,SUM(XX.B3NETREALDOLLAR) as B3NETREALDOLLAR
			,SUM(XX.B4NETREALDOLLAR) as B4NETREALDOLLAR
			,SUM(XX.B5NETREALDOLLAR) as B5NETREALDOLLAR
			,SUM(XX.B6NETREALDOLLAR) as B6NETREALDOLLAR
			,SUM(XX.B7NETREALDOLLAR) as B7NETREALDOLLAR
			,SUM(XX.B8NETREALDOLLAR) as B8NETREALDOLLAR
			,SUM(XX.B9NETREALDOLLAR) as B9NETREALDOLLAR
			,SUM(XX.B10NETREALDOLLAR) as B10NETREALDOLLAR	
			,SUM(XX.B1TOTALDLRCOST) as B1TOTALDLRCOST
			,SUM(XX.B2TOTALDLRCOST) as B2TOTALDLRCOST
			,SUM(XX.B3TOTALDLRCOST) as B3TOTALDLRCOST
			,SUM(XX.B4TOTALDLRCOST) as B4TOTALDLRCOST
			,SUM(XX.B5TOTALDLRCOST) as B5TOTALDLRCOST
			,SUM(XX.B6TOTALDLRCOST) as B6TOTALDLRCOST
			,SUM(XX.B7TOTALDLRCOST) as B7TOTALDLRCOST
			,SUM(XX.B8TOTALDLRCOST) as B8TOTALDLRCOST
			,SUM(XX.B9TOTALDLRCOST) as B9TOTALDLRCOST
			,SUM(XX.B10TOTALDLRCOST) as B10TOTALDLRCOST	
	FROM [dbo].[T_TCA_ITG_RESPONSE_ALLOCATIONS_DEAGGREGATED] XX
	GROUP BY XX.[ORDERID])
	, baseorderreferencedata AS
		(select * from T_TCA_ITG_RESPONSE_ALLOCATIONS_DEAGGREGATED
where IID IN
(
select x.IID from 
 (select IID, ROW_NUMBER () over (partition by orderID, ISNULL([broker],'NO BROKER'), ISNULL([account], 'NONE'), TRADE_DATE_TIME order by decision_date_time) LLevel from 
 T_TCA_ITG_RESPONSE_ALLOCATIONS_DEAGGREGATED) x
where x.LLevel = 1
)
		)	

	MERGE INTO [TCA].[TCAOrderRegister] Tar
	USING ( 
		SELECT DISTINCT
		ra.[ORDERID]
		,ra.[SECURITY_NAME]
		,ra.[SIDE]
		,ra.[ORDERSHARES]
		,so.[IsOrderFilled]
		,so.TOTAL_VALUE
		,ra.[TRADER]
		,p.PersonId as TraderPersonId
		,(CASE WHEN (ra.COUNTRY='US' and ((so.B2NETREALDOLLAR >= 10000 AND so.B2NETPCTCST >= 50) OR (so.B2NETPCTCST >= 100))) THEN 'Perf >= 50'
               WHEN (ra.COUNTRY='US' and ((so.B2NETREALDOLLAR <= -10000 AND so.B2NETPCTCST <= -50) OR (so.B2NETPCTCST <= -100))) THEN 'Perf <= -50'
               WHEN (ra.COUNTRY !='US' and ((so.B1NETREALDOLLAR >= 10000 AND so.B1NETPCTCST >= 50) OR (so.B1NETPCTCST >= 100))) THEN 'Perf >= 50'
               WHEN (ra.COUNTRY !='US' and ((so.B1NETREALDOLLAR <= -10000 AND so.B1NETPCTCST <= -50) OR (so.B1NETPCTCST <= -100))) THEN 'Perf <= -50'
		  END) as TCAException
		,ra.[COUNTRY]
		,ra.[DAYSTOCOMPLETION]
		,ra.[FILLED_PERCENT_OF_INTERVAL_VOLUME]*100 as [FILLED_PERCENT_OF_INTERVAL_VOLUME]
		,ra.[ORDER_PERCENT_OF_INTERVAL_VOLUME]*100 as [ORDER_PERCENT_OF_INTERVAL_VOLUME]
		,ra.[PM_ORDER_TYPE]
		,ra.[B1ORIGBENCHPRICE]
		,ra.[B1PRETRADECOST]
		,ra.[B2ORIGBENCHPRICE]
		,ra.[B2PRETRADECOST]
		,sdo.[DECISION_DATE_TIME2] 
		,edo.[ORDER_END_DATE_TIME]
		,ISNULL(ra.[BROKER],'NO BROKER') as Brokers --bro.[Brokers]
		,ISNULL(ra.[account], 'NONE') as Accounts--acc.[Accounts]
		,so.[ORIG_PRICE]
		,so.[FILLED_PERCENT_OF_DAILY_VOLUME]*100 as [FILLED_PERCENT_OF_DAILY_VOLUME]
		,so.[B1REALISEDCOSTBPS]
		,so.[B1NETPCTCST]
		,so.[B2REALISEDCOSTBPS]
		,so.[B2NETPCTCST]
		,so.[B3REALISEDCOSTBPS]
		,so.[B3NETPCTCST]
		,so.[B4REALISEDCOSTBPS]
		,so.[B4NETPCTCST]
		,so.[B5REALISEDCOSTBPS]
		,so.[B5NETPCTCST]
		,so.[B6REALISEDCOSTBPS]
		,so.[B6NETPCTCST]
		,so.[B7REALISEDCOSTBPS]
		,so.[B7NETPCTCST]
		,so.[B8REALISEDCOSTBPS]
		,so.[B8NETPCTCST]
		,so.[B9REALISEDCOSTBPS]
		,so.[B9NETPCTCST]
		,so.[B10REALISEDCOSTBPS]
		,so.[B10NETPCTCST]
		,(CASE WHEN ra.SIDE='Buy' THEN (ra.B1ORIGBENCHPRICE*(ra.B1PRETRADECOST/10000))+ra.B1ORIGBENCHPRICE
			  WHEN ra.SIDE='Sell' THEN ra.B1ORIGBENCHPRICE-(ra.B1ORIGBENCHPRICE*(ra.B1PRETRADECOST/10000))
		  END)as B1MODELADJUSTEDARRIVAL
		,(CASE WHEN ra.SIDE='Buy' THEN (ra.B3ORIGBENCHPRICE*(ra.B3PRETRADECOST/10000))+ra.B3ORIGBENCHPRICE
			  WHEN ra.SIDE='Sell' THEN ra.B3ORIGBENCHPRICE-(ra.B3ORIGBENCHPRICE*(ra.B3PRETRADECOST/10000))
		  END)as B3MODELADJUSTEDARRIVAL
		,so.B1NETREALDOLLAR
		,so.B2NETREALDOLLAR
		,so.B3NETREALDOLLAR
		,so.B4NETREALDOLLAR
		,so.B5NETREALDOLLAR
		,so.B6NETREALDOLLAR
		,so.B7NETREALDOLLAR
		,so.B8NETREALDOLLAR
		,so.B9NETREALDOLLAR
		,so.B10NETREALDOLLAR	
		,so.B1TOTALDLRCOST
		,so.B2TOTALDLRCOST
		,so.B3TOTALDLRCOST
		,so.B4TOTALDLRCOST
		,so.B5TOTALDLRCOST
		,so.B6TOTALDLRCOST
		,so.B7TOTALDLRCOST
		,so.B8TOTALDLRCOST
		,so.B9TOTALDLRCOST
		,so.B10TOTALDLRCOST	 
		FROM baseorderreferencedata ra
		INNER JOIN DistOrders_CTE dio
		ON ra.ORDERID = dio.ORDERID
		AND ra.TRADE_DATE_TIME = dio.TRADE_DATE_TIME
		AND ra.ACCOUNT = dio.ACCOUNT
		AND ra.BROKER = dio.BROKER
		AND dio.ORDERBY = 1
		INNER JOIN StartDateOrders_CTE sdo
		ON ra.ORDERID = sdo.ORDERID
		INNER JOIN EndDateOrders_CTE edo
		ON ra.ORDERID = edo.ORDERID
		--INNER JOIN Brokers_CTE bro
		--ON ra.ORDERID = bro.ORDERID
		--INNER JOIN Accounts_CTE acc
		--ON ra.ORDERID = acc.ORDERID
		INNER JOIN SumOrders_CTE so
		ON ra.ORDERID = so.ORDERID
		INNER JOIN DaysCompletion_CTE dc
		ON ra.ORDERID = dc.ORDERID
		LEFT OUTER JOIN [Core].[Persons] p
		ON ra.TRADER =  p.BloombergID 
		) Src
	 ON Tar.OrderId = Src.OrderId 
	 AND Tar.Brokers = Src.Brokers
	 AND Tar.Accounts = Src.Accounts
	 WHEN NOT MATCHED THEN
		INSERT ( OrderId
				,IsResolved
				,SECURITY_NAME
				,SIDE
				,ORDERSHARES
				,IsOrderFilled
				,TOTAL_VALUE
				,TRADER
				,TraderPersonId
				,TCAException
				,COUNTRY
				,DAYSTOCOMPLETION
				,FILLED_PERCENT_OF_INTERVAL_VOLUME
				,ORDER_PERCENT_OF_INTERVAL_VOLUME
				,PM_ORDER_TYPE
				,B1ORIGBENCHPRICE
				,B1PRETRADECOST
				,B2ORIGBENCHPRICE
				,B2PRETRADECOST
				,ORDER_START_DATE_TIME
				,ORDER_END_DATE_TIME
				,Brokers
				,Accounts
				,ORIG_PRICE
				,FILLED_PERCENT_OF_DAILY_VOLUME
				,B1REALISEDCOSTBPS
				,B1NETPCTCST
				,B2REALISEDCOSTBPS
				,B2NETPCTCST
				,B3REALISEDCOSTBPS
				,B3NETPCTCST
				,B4REALISEDCOSTBPS
				,B4NETPCTCST
				,B5REALISEDCOSTBPS
				,B5NETPCTCST
				,B6REALISEDCOSTBPS
				,B6NETPCTCST
				,B7REALISEDCOSTBPS
				,B7NETPCTCST
				,B8REALISEDCOSTBPS
				,B8NETPCTCST
				,B9REALISEDCOSTBPS
				,B9NETPCTCST
				,B10REALISEDCOSTBPS
				,B10NETPCTCST
				,B1MODELADJUSTEDARRIVAL
				,B3MODELADJUSTEDARRIVAL
				,B1NETREALDOLLAR
				,B2NETREALDOLLAR
				,B3NETREALDOLLAR
				,B4NETREALDOLLAR
				,B5NETREALDOLLAR
				,B6NETREALDOLLAR
				,B7NETREALDOLLAR
				,B8NETREALDOLLAR
				,B9NETREALDOLLAR
				,B10NETREALDOLLAR	
				,B1TOTALDLRCOST
				,B2TOTALDLRCOST
				,B3TOTALDLRCOST
				,B4TOTALDLRCOST
				,B5TOTALDLRCOST
				,B6TOTALDLRCOST
				,B7TOTALDLRCOST
				,B8TOTALDLRCOST
				,B9TOTALDLRCOST
				,B10TOTALDLRCOST	 
				,JoinGUID)
		VALUES ( Src.OrderId
				,0
				,Src.SECURITY_NAME
				,Src.SIDE
				,Src.ORDERSHARES
				,Src.IsOrderFilled
				,Src.TOTAL_VALUE
				,Src.TRADER
				,Src.TraderPersonId
				,Src.TCAException
				,Src.COUNTRY
				,Src.DAYSTOCOMPLETION
				,Src.FILLED_PERCENT_OF_INTERVAL_VOLUME
				,Src.ORDER_PERCENT_OF_INTERVAL_VOLUME
				,Src.PM_ORDER_TYPE
				,Src.B1ORIGBENCHPRICE
				,Src.B1PRETRADECOST
				,Src.B2ORIGBENCHPRICE
				,Src.B2PRETRADECOST
				,Src.DECISION_DATE_TIME2
				,Src.ORDER_END_DATE_TIME
				,Src.Brokers
				,Src.Accounts
				,Src.ORIG_PRICE
				,Src.FILLED_PERCENT_OF_DAILY_VOLUME
				,Src.B1REALISEDCOSTBPS
				,Src.B1NETPCTCST
				,Src.B2REALISEDCOSTBPS
				,Src.B2NETPCTCST
				,Src.B3REALISEDCOSTBPS
				,Src.B3NETPCTCST
				,Src.B4REALISEDCOSTBPS
				,Src.B4NETPCTCST
				,Src.B5REALISEDCOSTBPS
				,Src.B5NETPCTCST
				,Src.B6REALISEDCOSTBPS
				,Src.B6NETPCTCST
				,Src.B7REALISEDCOSTBPS
				,Src.B7NETPCTCST
				,Src.B8REALISEDCOSTBPS
				,Src.B8NETPCTCST
				,Src.B9REALISEDCOSTBPS
				,Src.B9NETPCTCST
				,Src.B10REALISEDCOSTBPS
				,Src.B10NETPCTCST
				,Src.B1MODELADJUSTEDARRIVAL
				,Src.B3MODELADJUSTEDARRIVAL
				,Src.B1NETREALDOLLAR
				,Src.B2NETREALDOLLAR
				,Src.B3NETREALDOLLAR
				,Src.B4NETREALDOLLAR
				,Src.B5NETREALDOLLAR
				,Src.B6NETREALDOLLAR
				,Src.B7NETREALDOLLAR
				,Src.B8NETREALDOLLAR
				,Src.B9NETREALDOLLAR
				,Src.B10NETREALDOLLAR	
				,Src.B1TOTALDLRCOST
				,Src.B2TOTALDLRCOST
				,Src.B3TOTALDLRCOST
				,Src.B4TOTALDLRCOST
				,Src.B5TOTALDLRCOST
				,Src.B6TOTALDLRCOST
				,Src.B7TOTALDLRCOST
				,Src.B8TOTALDLRCOST
				,Src.B9TOTALDLRCOST
				,Src.B10TOTALDLRCOST				
				, NewId())
	 WHEN MATCHED THEN
	   UPDATE SET SECURITY_NAME = SRC.SECURITY_NAME
				,SIDE = Src.SIDE
				,ORDERSHARES = Src.ORDERSHARES
				,IsOrderFilled = Src.IsOrderFilled
				,TOTAL_VALUE = Src.TOTAL_VALUE
				,TRADER = Src.TRADER
				,TraderPersonId = Src.TraderPersonId
				,TCAException = Src.TCAException
				,COUNTRY = Src.COUNTRY
				,DAYSTOCOMPLETION = Src.DAYSTOCOMPLETION
				,FILLED_PERCENT_OF_INTERVAL_VOLUME = Src.FILLED_PERCENT_OF_INTERVAL_VOLUME
				,ORDER_PERCENT_OF_INTERVAL_VOLUME = Src.ORDER_PERCENT_OF_INTERVAL_VOLUME
				,PM_ORDER_TYPE = Src.PM_ORDER_TYPE
				,B1ORIGBENCHPRICE = Src.B1ORIGBENCHPRICE
				,B1PRETRADECOST = Src.B1PRETRADECOST
				,B2ORIGBENCHPRICE = Src.B2ORIGBENCHPRICE
				,B2PRETRADECOST = Src.B2PRETRADECOST
				,ORDER_START_DATE_TIME  = Src.DECISION_DATE_TIME2 
				,ORDER_END_DATE_TIME = Src.ORDER_END_DATE_TIME
				,Brokers = Src.Brokers
				,Accounts = Src.Accounts
				,ORIG_PRICE = Src.ORIG_PRICE
				,FILLED_PERCENT_OF_DAILY_VOLUME = Src.FILLED_PERCENT_OF_DAILY_VOLUME
				,B1REALISEDCOSTBPS = Src.B1REALISEDCOSTBPS
				,B1NETPCTCST = Src.B1NETPCTCST
				,B2REALISEDCOSTBPS = Src.B2REALISEDCOSTBPS
				,B2NETPCTCST = Src.B2NETPCTCST
				,B3REALISEDCOSTBPS = Src.B3REALISEDCOSTBPS
				,B3NETPCTCST = Src.B3NETPCTCST
				,B4REALISEDCOSTBPS = Src.B4REALISEDCOSTBPS
				,B4NETPCTCST = Src.B4NETPCTCST
				,B5REALISEDCOSTBPS = Src.B5REALISEDCOSTBPS
				,B5NETPCTCST = Src.B5NETPCTCST
				,B6REALISEDCOSTBPS = Src.B6REALISEDCOSTBPS
				,B6NETPCTCST = Src.B6NETPCTCST
				,B7REALISEDCOSTBPS = Src.B7REALISEDCOSTBPS
				,B7NETPCTCST = Src.B7NETPCTCST
				,B8REALISEDCOSTBPS = Src.B8REALISEDCOSTBPS
				,B8NETPCTCST = Src.B8NETPCTCST				
				,B9REALISEDCOSTBPS = Src.B9REALISEDCOSTBPS
				,B9NETPCTCST = Src.B9NETPCTCST	
				,B10REALISEDCOSTBPS = Src.B10REALISEDCOSTBPS
				,B10NETPCTCST = Src.B10NETPCTCST
				,B1MODELADJUSTEDARRIVAL = Src.B1MODELADJUSTEDARRIVAL
				,B3MODELADJUSTEDARRIVAL = Src.B3MODELADJUSTEDARRIVAL
				,B1NETREALDOLLAR = Src.B1NETREALDOLLAR
				,B2NETREALDOLLAR = Src.B2NETREALDOLLAR
				,B3NETREALDOLLAR = Src.B3NETREALDOLLAR
				,B4NETREALDOLLAR = Src.B4NETREALDOLLAR
				,B5NETREALDOLLAR = Src.B5NETREALDOLLAR
				,B6NETREALDOLLAR = Src.B6NETREALDOLLAR
				,B7NETREALDOLLAR = Src.B7NETREALDOLLAR
				,B8NETREALDOLLAR = Src.B8NETREALDOLLAR
				,B9NETREALDOLLAR = Src.B9NETREALDOLLAR
				,B10NETREALDOLLAR = Src.B10NETREALDOLLAR	
				,B1TOTALDLRCOST = Src.B1TOTALDLRCOST
				,B2TOTALDLRCOST = Src.B2TOTALDLRCOST
				,B3TOTALDLRCOST = Src.B3TOTALDLRCOST
				,B4TOTALDLRCOST = Src.B4TOTALDLRCOST
				,B5TOTALDLRCOST = Src.B5TOTALDLRCOST
				,B6TOTALDLRCOST = Src.B6TOTALDLRCOST
				,B7TOTALDLRCOST = Src.B7TOTALDLRCOST
				,B8TOTALDLRCOST = Src.B8TOTALDLRCOST
				,B9TOTALDLRCOST = Src.B9TOTALDLRCOST
				,B10TOTALDLRCOST = Src.B10TOTALDLRCOST
				,CADIS_SYSTEM_UPDATED = GETDATE()
				,CADIS_SYSTEM_LASTMODIFIED = GETDATE()		
				OUTPUT INSERTED.OrderId
	 INTO @OrderIds;
		
	-- create [TCA].[TCANarrativeEvents] record
	MERGE INTO [TCA].[TCANarrativeEvents] Tar
	USING (SELECT OrderId
	 FROM @OrderIds) Src
	 ON Tar.OrderId = Src.OrderId
	 WHEN NOT MATCHED THEN
		INSERT (OrderId,EventType, EventDate, JoinGUID)
		VALUES (Src.OrderId, 'Created', GetDate(), NewId());
		
		
	-- populate Brokers
	MERGE INTO [TCA].[TCAOrderBrokers] Tar
	USING (SELECT ra.[ORDERID] as OrderId
				 ,ISNULL(ra.[BROKER],'NO BROKER') as Broker
				 ,CAST(SUM(ra.[TRADE_SHARES]) as int) as TotalShares
		   FROM  [dbo].[T_TCA_ITG_RESPONSE_ALLOCATIONS_DEAGGREGATED] ra
		   INNER JOIN @OrderIds oi
		   ON ra.ORDERID = oi.OrderId
		  GROUP BY ra.[ORDERID], ISNULL(ra.[BROKER],'NO BROKER')
		) Src
     ON Tar.OrderId = Src.OrderId
	 AND Tar.Broker = Src.Broker
	 WHEN NOT MATCHED THEN
		INSERT (OrderId,Broker,TotalShares)
		VALUES (Src.OrderId, Src.Broker, Src.TotalShares )
	 WHEN MATCHED AND Tar.TotalShares != Src.TotalShares THEN
	    UPDATE SET Tar.TotalShares = Src.TotalShares,
					Tar.CADIS_SYSTEM_UPDATED = GETDATE(),
					Tar.CADIS_SYSTEM_LASTMODIFIED = GETDATE();
		
	-- populate Accounts
	MERGE INTO [TCA].[TCAOrderAccounts] Tar
	USING (SELECT ra.[ORDERID] as OrderId
				 ,ISNULL(ra.[ACCOUNT], 'NONE') as Account -- in essence below is a best attempt to get rid of rounding issues with summing weighted trades at broker level by taking the original allocation order volumes. But that doesn't work if an order is partially filled and then aggregated or cancelled
				 ,IIF( ABS(CAST(MIN(ra.[Shares_By_Account]) as int) - CAST(SUM(ra.[TRADE_SHARES]) as int)) < 10, CAST(MIN(ra.[Shares_By_Account]) as int), CAST(SUM(ra.[TRADE_SHARES]) as int))  as TotalShares
		   FROM  [dbo].[T_TCA_ITG_RESPONSE_ALLOCATIONS_DEAGGREGATED] ra
		   INNER JOIN @OrderIds oi
		   ON ra.ORDERID = oi.OrderId
		  GROUP BY ra.[ORDERID], ISNULL(ra.[account], 'NONE')
		) Src
     ON Tar.OrderId = Src.OrderId
	 AND Tar.Account = Src.Account
	 WHEN NOT MATCHED THEN
		INSERT (OrderId,Account,TotalShares)
		VALUES (Src.OrderId, Src.Account, Src.TotalShares )
	 WHEN MATCHED AND Tar.TotalShares != Src.TotalShares THEN
	    UPDATE SET Tar.TotalShares = Src.TotalShares,
					Tar.CADIS_SYSTEM_UPDATED = GETDATE(),
					Tar.CADIS_SYSTEM_LASTMODIFIED = GETDATE();				
	
	

END TRY
BEGIN CATCH
		Declare   @ErrorMessage		NVARCHAR(4000)
				, @ErrorSeverity	INT 
				, @ErrorState		INT
				, @ErrorNumber		INT
				;

		Select	  @ErrorNumber		= ERROR_NUMBER()
				, @ErrorMessage		= @strProcedureName + ' - ' + ERROR_MESSAGE() 
				, @ErrorSeverity	= ERROR_SEVERITY()
				, @ErrorState		= ERROR_STATE();

		RaisError (
				  @ErrorMessage		-- Message text.
				, @ErrorSeverity	-- Severity.
				, @ErrorState		-- State.
			  );
		Return @ErrorNumber;
END CATCH;



