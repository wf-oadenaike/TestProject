
CREATE PROC [TCA].[USP_TCAOutParent]
(
@STARTDATE DATE = NULL,
@DAYSFORWARDTOGO INT = 90,
@ORDER_ID	INT = NULL
)
-------------------------------------------------------------------------------------- 
-- NAME:			[TCA].[USP_TCAOutParent]
-- 
-- NOTE:			BLOOMBERG TO TCA DEAGGREGATED FILE CONTAINER
-- 
-- AUTHOR:			VIPUL KHATRI
-- DATE:			21/03/2018
-------------------------------------------------------------------------------------- 
-- DESCRIPTION:		CREATE A FEED FROM BLOOMBERG TO CREATE A TCA DEAGGREGATED FILE
-- HISTORY:			
-- 22-03-2018		VIPUL KHATRI			DAP-1858      -- Initially this will be used to rec the current logic

AS

BEGIN

SET @STARTDATE = ISNULL(@STARTDATE, DATEADD(DD, -10,  GETDATE()))

IF OBJECT_ID('TEMPDB..#ORDER_FILLS') IS NOT NULL
	 DROP TABLE #ORDER_FILLS

IF OBJECT_ID('TEMPDB..#ORDER_NUMBERS') IS NOT NULL
	 DROP TABLE #ORDER_NUMBERS

IF OBJECT_ID('TEMPDB..#T_BBG_TCA_TRADE_ORDERS_AUDIT') IS NOT NULL
	DROP TABLE #T_BBG_TCA_TRADE_ORDERS_AUDIT

IF OBJECT_ID('TEMPDB..#CHILD_ORDERS') IS NOT NULL
	DROP TABLE #CHILD_ORDERS

IF OBJECT_ID('TEMPDB..#PARENT_ORDERS') IS NOT NULL
	DROP TABLE #PARENT_ORDERS

-- REMOVE PREVIOUS VALUES
TRUNCATE TABLE TCA.TCAOut

-- Create a temp table to store child proc results
CREATE TABLE #ORDER_FILLS (
		ROOT_I_TSORDNUM    INT            NOT NULL,
		LVL                INT            NOT NULL,
		I_TSORDNUM         INT            NOT NULL,
		I_TSORDNUMDESC     VARCHAR(200)   NULL,
		C_ACCOUNT          VARCHAR(8)   NOT NULL,
		C_BROKER           VARCHAR(10)   NULL,
		C_SIDE			   VARCHAR(5)	  NOT NULL,
		ORDER_QUANTITY     DECIMAL(18, 6) NOT NULL,
		ALLOCATED_QUANTITY DECIMAL(18, 6) NOT NULL,
		REMAINDER          DECIMAL(18, 6) NOT NULL,
		RATIO              DECIMAL(18, 6) NULL
)

CREATE TABLE #T_BBG_TCA_TRADE_ORDERS_AUDIT (
		I_AGGRFROM INT NULL,
		I_AGGRTO   INT NULL,
		I_TSORDNUM INT NULL
)

CREATE TABLE #ORDER_NUMBERS
(
		ID				INT				NOT NULL IDENTITY(1,1),
		I_TSORDNUM		INT				NOT NULL
)		

CREATE TABLE #CHILD_ORDERS
(
		I_TSORDNUM		INT				NULL
)

CREATE TABLE #PARENT_ORDERS
(
		I_TSORDNUM		INT				NULL,
		I_AGGRFROM		INT				NULL,
		I_AGGRTO		INT				NULL,
		LVL				INT				NULL
)


-- TEMP TABLE USED BY CHILD PROC TO INCREASE SPEED.
INSERT INTO #T_BBG_TCA_TRADE_ORDERS_AUDIT (I_AGGRFROM, I_AGGRTO, I_TSORDNUM)
		SELECT DISTINCT
			I_AGGRFROM,
			I_AGGRTO,
			I_TSORDNUM
		FROM T_BBG_TCA_TRADE_ORDERS_AUDIT WITH (NOLOCK)

-- Need to confirm top level orders are being compared.

INSERT INTO #CHILD_ORDERS(I_TSORDNUM)
SELECT DISTINCT I_TSORDNUM
FROM T_BBG_TCA_TRADE_ORDERS_AUDIT WITH (NOLOCK)
WHERE D_DATE BETWEEN @STARTDATE AND DATEADD(DD, @DAYSFORWARDTOGO, @STARTDATE)
AND C_EVENT IN ('ACTIVATED ORDER')

;
WITH PARENTORDERS (I_AGGRFROM,
                   I_AGGRTO,
                   I_TSORDNUM,
                   LVL)
     AS (
          SELECT DISTINCT I_AGGRFROM,														  
                          I_AGGRTO,
                          I_TSORDNUM,
                          0 AS LVL
          FROM #T_BBG_TCA_TRADE_ORDERS_AUDIT WITH (NOLOCK)
          WHERE I_TSORDNUM IN (
               SELECT I_TSORDNUM
               FROM #CHILD_ORDERS
          )
          AND I_AGGRTO IS NOT NULL
          UNION ALL
          SELECT AUDT.I_AGGRFROM,
                 AUDT.I_AGGRTO,
                 AUDT.I_TSORDNUM,
                 LVL + 1
          FROM #T_BBG_TCA_TRADE_ORDERS_AUDIT AS AUDT WITH (NOLOCK)
          INNER JOIN PARENTORDERS AS D
               ON AUDT.I_AGGRFROM = D.I_TSORDNUM
          WHERE AUDT.I_AGGRFROM <> AUDT.I_TSORDNUM  -- WE COULD GET AN INFINITE RECURSION WITHOUT THIS CONDITION.
     )
INSERT INTO #PARENT_ORDERS (I_TSORDNUM,
I_AGGRFROM,
I_AGGRTO,
LVL)
     SELECT I_TSORDNUM,
            I_AGGRFROM,
            I_AGGRTO,
            LVL
     FROM PARENTORDERS



IF @ORDER_ID IS NULL
	BEGIN
		-- INSERT ALL ORDER NUMBERS TO BE PROCESSED
		INSERT INTO #ORDER_NUMBERS
		(
		I_TSORDNUM
		)
		-- ALL TOP LEVEL ORDERS
		SELECT DISTINCT I_TSORDNUM ORDER_ID
		FROM #PARENT_ORDERS PO
		WHERE (I_AGGRTO IS NULL OR I_TSORDNUM = I_AGGRTO)

		UNION 

		SELECT DISTINCT I_TSORDNUM ORDER_ID
								  
		FROM #CHILD_ORDERS PO
		WHERE I_TSORDNUM NOT IN (
				SELECT DISTINCT I_TSORDNUM 
				FROM #PARENT_ORDERS 
				WHERE I_AGGRTO IS NOT NULL)
	END
ELSE
	BEGIN
		INSERT INTO #ORDER_NUMBERS
		(
		I_TSORDNUM
		)
		SELECT @ORDER_ID
	END


DECLARE @ID INT
DECLARE @MAX_ID INT
DECLARE @ORDER_ID1 INT

SET		@ID = 1
SET		@MAX_ID = (SELECT MAX(ID) FROM #ORDER_NUMBERS)

-- WHILE LOOP
WHILE (@ID <= @MAX_ID)
	BEGIN

		TRUNCATE TABLE #ORDER_FILLS

		SET @ORDER_ID1 = (SELECT I_TSORDNUM FROM #ORDER_NUMBERS WHERE ID = @ID)

		EXEC TCA.USP_TCAOUT @ORDER_ID = @ORDER_ID1

		INSERT INTO TCAOUT
		(
		ROOT_I_TSORDNUM,
		LVL,
		I_TSORDNUM,
		I_TSORDNUMDESC,
		C_ACCOUNT,
		C_BROKER,
		C_SIDE,
		ORDER_QUANTITY,
		ALLOCATED_QUANTITY,
		REMAINDER,
		RATIO,
		TOP_LEVEL_DERIVED
		)
		SELECT ROOT_I_TSORDNUM,
		LVL,
		O.I_TSORDNUM,
		I_TSORDNUMDESC,
		C_ACCOUNT,
		ISNULL(C_BROKER,''),
		C_SIDE,
		ORDER_QUANTITY,
		ALLOCATED_QUANTITY,
		REMAINDER,
		RATIO,
		CASE WHEN P.I_AGGRTO IS NOT NULL 
			 THEN	1
			 ELSE	0
		END  
		FROM #ORDER_FILLS O
		LEFT OUTER JOIN 
				(SELECT DISTINCT I_AGGRTO 
				FROM #PARENT_ORDERS) P
		ON O.ROOT_I_TSORDNUM = P.I_AGGRTO
		where O.I_TSORDNUM not in (select I_TSORDNUM FROM TCAOUT)

		SET @ID = @ID + 1
	END

END
